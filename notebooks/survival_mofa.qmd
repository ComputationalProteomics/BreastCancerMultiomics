---
title: "Survival Analysis"
author: "Sergio Mosquim Junior"
format:
  html:
    toc: true
    code-fold: true
    embed-resources: true
    toc-location: left
    smooth-scroll: true
    message: false
engine: knitr
params:
  outputdir: '/multiomics/results/figures/survival_analysis/MOFA/LNposvsLNneg/Lobular/'
  model: '/multiomics/results/MOFA/LNposvsLNneg/Lobular/model.RDS'
  factor: 3
  df: 3
  topN: 3
  iterMax: 20
---

# Requires Packages:

```{r required packages}
#| message: false
#| warning: false
pkgCheck <- function(pkg)
if(!require(package=pkg,quietly = TRUE,character.only = TRUE)){
  install.packages(pkgs = pkg,dependencies = TRUE,clean = TRUE,quiet = TRUE)
}
packages <- c('survival','survminer')
lapply(X = packages,FUN = pkgCheck)

library(survival)
library(survminer)
library(tidyverse)
library(tidymodels)
library(MOFA2)
```

# Survival Analysis
## MOFA Models
### All samples
```{r}
if(!dir.exists(paths = params$outputdir)) {
  dir.create(path = params$outputdir,recursive = TRUE)
}
```

#### Load MOFA Model
```{r}
model <- readRDS(file = params$model)
factors <- get_factors(model)[[1]]
factors <- tibble(sample=rownames(factors)) %>% bind_cols(.,factors)
```

#### Fit Cox Model
  This creates a survival object with distant recurrence free interval as time and DRFi_event (death) as the event.
  A Cox Propotional Hazards model is fit with all factors as variables followed by evaluating the model with the scaled Schoenfeld test which tests the null hypothesis that the variable is stable over time, therefore respecting the Cox test assumptions. A graphical representation of the scaled Schoenfeld residuals can also be seen.
```{r}
#| tbl-column: margin
objSurv <- Surv(time = model@samples_metadata$DRFi_days,event = model@samples_metadata$DRFi_event)
variables <- factors %>% 
  dplyr::select(dplyr::contains('Factor')) %>% 
  colnames() 

coxFormula <- reformulate(termlabels = variables,response = 'objSurv')

fit <- coxph(formula = coxFormula,data = factors,control = coxph.control(iter.max = params$iterMax))
summary(fit)
```
```{r}
#| tbl-column: page
#| tbl-colwidths: true
fitcheck <- cox.zph(fit)
fitcheck
```
```{r}
pdf(file = paste0(params$outputdir,'zph_plot_factors.pdf'),width = 20,height = 20,onefile = TRUE)
ggcoxzph(fitcheck,resid = TRUE,df = params$df)
dev.off()
```

#### Plot Hazard Ratios
```{r}
hrPlot <- ggforest(fit,data = factors)
ggsave(filename = 'HR_plot_factors.pdf',plot = hrPlot,device = 'pdf',path = params$outputdir,width = 10,height = 10,dpi = 300)
```
#### Extract top features
```{r}
modelMeta <- model@samples_metadata
features <- get_weights(object = model,views = 'all',factors = c(params$factor),as.data.frame = TRUE,scale = TRUE)
featFactors <- features %>% 
  dplyr::group_by(factor,view) %>% 
  slice_max(order_by = abs(value),n = params$topN) %>% 
  as_tibble

featList <- list(proteomics={featFactors %>%dplyr::filter(view=='proteomics',factor==paste0('Factor',params$factor)) %>% select(feature) %>% unlist %>% as.character %>% unique},
              phosphoproteomics={featFactors %>% dplyr::filter(view=='phosphoproteomics',factor==paste0('Factor',params$factor)) %>% select(feature) %>% unlist %>% as.character %>% unique},
              transcriptomics={featFactors %>% dplyr::filter(view=='transcriptomics',factor==paste0('Factor',params$factor)) %>% select(feature) %>% unlist %>% as.character %>% unique},
              epic={featFactors %>% dplyr::filter(view=='EPIC',factor==paste0('Factor',params$factor)) %>% select(feature) %>% unlist %>% as.character %>% unique},
              cibersort={featFactors %>% dplyr::filter(view=='cibersortx',factor==paste0('Factor',params$factor)) %>% select(feature) %>% unlist %>% as.character %>% unique}) 

protFeatures <- get_data(object = model,features = list(proteomics=featList$proteomics),as.data.frame = TRUE) %>% pivot_wider(id_cols = 'sample',names_from = feature,values_from = value)
phosphoFeatures <- get_data(object = model,features = list(phosphoproteomics=featList$phosphoproteomics),as.data.frame = TRUE) %>% pivot_wider(id_cols = 'sample',names_from = feature,values_from = value)
rnaFeatures <- get_data(object = model,features = list(transcriptomics=featList$transcriptomics),as.data.frame = TRUE) %>% pivot_wider(id_cols = 'sample',names_from = feature,values_from = value)
epicFeatures <- get_data(object = model,features = list(EPIC=featList$epic),as.data.frame = TRUE) %>% pivot_wider(id_cols = 'sample',names_from = feature,values_from = value)
cibersortFeatures <- get_data(object = model,features = list(cibersortx=featList$cibersort),as.data.frame = TRUE) %>% pivot_wider(id_cols = 'sample',names_from = feature,values_from = value)


finalFeatures <- reduce(.x = list(protFeatures,phosphoFeatures,rnaFeatures,epicFeatures,cibersortFeatures),.f = ~left_join(x = .x,y = .y,by = 'sample'))
colnames(finalFeatures) <- make.names(names = colnames(finalFeatures),unique = TRUE)
finalFeatures <- modelMeta %>% select(sample,time=DRFi_days,event=DRFi_event) %>% left_join(finalFeatures)
```


#### Fit Cox Model with same clinical data in factor of choice
```{r}
variables <- finalFeatures %>% 
  dplyr::select(-c(sample,time,event)) %>% 
  colnames()

coxFormula <- reformulate(termlabels = variables,response = 'objSurv')

fit2 <- coxph(formula = coxFormula,data = finalFeatures,control = coxph.control(iter.max = params$iterMax))

fit2Test <- cox.zph(fit2)
```

##### Check fit
```{r}
pdf(file = paste0(params$outputdir,'plot_coxzph.pdf'),width = 20,height = 20,onefile = TRUE)
ggcoxzph(fit2Test,df = params$df)
dev.off()
```

##### Plot Hazard Ratios
```{r}
plotPH <- ggforest(model = fit2,data = finalFeatures)
ggsave(filename = 'plot_forest_features.pdf',plot = plotPH,device = 'pdf',path = params$outputdir,dpi = 300,width = 20,height = 20)
```

##### Calculate cut points and fit model to high vs low
```{r}
featCut <- surv_cutpoint(data = finalFeatures,variables = variables)

finalFeaturesFactors <- surv_categorize(x = featCut)

objSurv <- Surv(time = finalFeatures$time,event = finalFeatures$event)

survFormula <- reformulate(termlabels = variables,response = 'objSurv')

fitFeatures <- surv_fit(formula = survFormula,data = finalFeaturesFactors)
```

###### Kaplan-Meier plots
```{r}
#| warning: false
kmPlots <- map(.x = variables,.f = function(x){
  survFormula <- reformulate(termlabels = x,response = 'objSurv')
  fit <- surv_fit(formula = survFormula,data = finalFeaturesFactors)
  ggsurvplot(fit = fit,data = finalFeaturesFactors,conf.int = TRUE,pval = TRUE,pval.method = TRUE,surv.median.line = 'hv',risk.table = TRUE)
  })
```
```{r}
invisible(pdf(file = paste0(params$outputdir,'kaplan_meier.pdf'),width = 20,height = 10,onefile = TRUE))
invisible(map(1:length(kmPlots),~print(kmPlots[[.x]])))
invisible(dev.off())
```

