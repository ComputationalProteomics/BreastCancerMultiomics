---
title: "Survival Analysis - MOFA"
author: "Sergio Mosquim Junior"
format:
  html:
    toc: true
    code-fold: true
    embed-resources: true
    toc-location: left
    smooth-scroll: true
    message: false
engine: knitr
params:
  model: '/multiomics/results/MOFA/AllSamples_noG2/model.RDS'
  outcome: 'LN'
  event: 'RFi_event'
  time: 'RFi_days'
---

# Requires Packages:

```{r required packages}
#| message: false
#| warning: false

pkgCheck <- function(pkg)
if(!require(package=pkg,quietly = TRUE,character.only = TRUE)){
  install.packages(pkgs = pkg,dependencies = TRUE,clean = TRUE,quiet = TRUE)
}
packages <- c('survival','survminer')
lapply(X = packages,FUN = pkgCheck)

library(survival)
library(survminer)
library(tidyverse)
library(tidymodels)
library(MOFA2)
library(censored)
library(gridExtra)
library(grDevices)
library(forestmodel)
```

# Survival Analysis
## MOFA Factors
```{r}
outputdir <- str_split(string = params$model,pattern = '/',n = 4)[[1]][4] %>% 
  str_split_1(pattern = '/') %>% 
  .[1:length(.)-1] %>% 
  paste0(.,collapse = '/')
outputdir <- paste0('/multiomics/results/figures/survival_analysis/',outputdir,'/',str_split_i(outputdir,'/',2),'_',params$outcome,'_',params$event,'/')


if(!dir.exists(paths = outputdir)) {
  dir.create(path = outputdir,recursive = TRUE)
}
```

### Load MOFA Model
```{r}
set.seed(123)
model <- readRDS(file = params$model)
factors <- get_factors(model)[[1]]
factors <- tibble(sample=rownames(factors)) %>% bind_cols(.,factors)

data <- model@samples_metadata %>% 
  dplyr::select(sample,time=params$time,event=params$event) %>% 
  mutate(surv=Surv(time=time,event=event)) %>% 
  left_join(factors)
```

### Fit Cox Model
  This creates a survival object with distant recurrence free interval as time and DRFi_event (death) as the event.
  A Cox Propotional Hazards model is fit with all factors as variables followed by evaluating the model with the scaled Schoenfeld test which tests the null hypothesis that the variable is stable over time, therefore respecting the Cox test assumptions. A graphical representation of the scaled Schoenfeld residuals can also be seen.

### Tidymodels Cox Factors
```{r}
variables <- data %>%
  dplyr::select(contains('Factor')) %>%
  colnames()


cox_factors <- map(.x = variables,.f = function(x){
  basic_recipe <- recipe(x =  data) %>%
    update_role(sample,new_role = 'ID') %>% 
    update_role(all_of(x),new_role = 'predictor') %>% 
    update_role(surv,new_role = 'outcome')

  data_feat_baked <- basic_recipe %>% 
    prep() %>% 
    bake(new_data = NULL)

  hr_factors <- proportional_hazards() %>% 
    set_engine('survival') %>% 
    set_mode('censored regression')

  wf <- workflow() %>%
    add_recipe(basic_recipe) %>% 
    add_model(hr_factors,formula = surv~.) %>% 
    fit(data=data) %>% 
    extract_fit_engine() %>% 
    summary()
  
})

cox_factors_summary <- map(1:length(cox_factors),function(x){
  pluck(cox_factors[[x]],'coefficients') %>% 
    as.data.frame()}) %>% 
  bind_rows() 

signif_factors <- cox_factors_summary %>% 
  filter(`Pr(>|z|)`<0.1) %>% 
  rownames()

cox_multi_factors <- {
  basic_recipe <- recipe(x =  data) %>%
    update_role(sample,new_role = 'ID') %>% 
    update_role(all_of(variables),new_role = 'predictor') %>% 
    update_role(surv,new_role = 'outcome')

  data_feat_baked <- basic_recipe %>% 
    prep() %>% 
    bake(new_data = NULL)

  hr_factors <- proportional_hazards() %>% 
    set_engine('survival') %>% 
    set_mode('censored regression')

  wf <- workflow() %>%
    add_recipe(basic_recipe) %>% 
    add_model(hr_factors,formula = surv~.) %>% 
    fit(data=data)
}
```
```{r}
#| tbl-column: page
#| tbl-colwidths: true
#| include: false
fitcheck <- cox.zph(extract_fit_engine(cox_multi_factors))
fitcheck
```
```{r}
#| include: false
# pdf(file = paste0(outputdir,'zph_plot_factors.pdf'),width = 20,height = 20,onefile = TRUE)
# ggcoxzph(fitcheck,resid = TRUE,df = params$df)
# dev.off()
```

#### Plot Hazard Ratios
```{r}
hrPlot <- extract_fit_engine(cox_multi_factors) %>% forest_model()
ggsave(filename = 'HR_plot_factors_cox.pdf',plot = hrPlot,device = 'pdf',path = outputdir,width = 10,height = 10,dpi = 300)

varKeep <- list('params','varKeep','outputdir')
rm(list = setdiff(ls(),varKeep))
invisible(gc())
```


## MOFA - Cox Single Features
### Factors associated with outcome

```{r}
model <- readRDS(file = params$model)
modelMeta <- model@samples_metadata

associated.factors <- correlate_factors_with_covariates(model, 
                                                   covariates = c('Group.Info',
                                                                  'Size.mm',
                                                                  'NCN.PAM50',
                                                                  "TreatGroup",
                                                                  "Age.(5-year.range,.e.g.,.35(31-35),.40(36-40),.45(41-45).etc.)",
                                                                  "NCN.ROR.risk.cat",
                                                                  "PR",
                                                                  'SSP.PAM50',
                                                                  "NHG",
                                                                  'tumor_mutational_burden',
                                                                  'LN',
                                                                  'LN.spec',
                                                                  "HisScoreFat",
                                                                  "HisScoreInsituCancer",
                                                                  "HisScoreInvasiveCancer",
                                                                  "HisScoreLymphocytes",
                                                                  "HisScoreNormal",
                                                                  "HisScoreStroma",
                                                                  parse_character(params$outcome)), 
                                                   plot="log_pval",
                                                   abs = TRUE,
                                                   alpha = 0.05,
                                                   return_data = TRUE) %>% 
  as.data.frame() %>% 
  dplyr::mutate(across(everything(),~if_else(.x==0,NA_integer_,.x))) %>% 
  reframe(Factor=rownames(.),Outcome=.[[params$outcome]]) %>% 
  drop_na() %>% 
  arrange(desc(Outcome))
```

### Features from selected factors
```{r}
features <- MOFA2::get_weights(object = model,views = 'all',factors = associated.factors[['Factor']],as.data.frame = TRUE,scale = TRUE)
featFactors <- features %>% 
  dplyr::group_by(factor,view) %>% 
  filter(abs(value)>=0.5) %>% 
  as_tibble

featList <- list(proteomics={featFactors %>%dplyr::filter(view=='proteomics') %>% select(feature) %>% unlist %>% as.character %>% unique},
              phosphoproteomics={featFactors %>% dplyr::filter(view=='phosphoproteomics') %>% select(feature) %>% unlist %>% as.character %>% unique},
              transcriptomics={featFactors %>% dplyr::filter(view=='transcriptomics') %>% select(feature) %>% unlist %>% as.character %>% unique},
              immuneinfiltration={featFactors %>% dplyr::filter(view=='immuneinfiltration') %>% select(feature) %>% unlist %>% as.character %>% unique}) 

if(!is_empty(featList[['proteomics']])){
  protFeatures <- get_data(object = model,features = list(proteomics=featList$proteomics),as.data.frame = TRUE) %>% 
    mutate(feature=paste0(feature,'.',view)) %>% 
    pivot_wider(id_cols = 'sample',names_from = feature,values_from = value)
  }else{protFeatures <- data_frame(sample=modelMeta[['sample']])}

if(!is_empty(featList[['phosphoproteomics']])){
  phosphoFeatures <- get_data(object = model,features = list(phosphoproteomics=featList$phosphoproteomics),as.data.frame = TRUE) %>% 
    mutate(feature=paste0(feature,'.',view)) %>% 
    pivot_wider(id_cols = 'sample',names_from = feature,values_from = value)
  }else{phosphoFeatures <- data_frame(sample=modelMeta[['sample']])}

if(!is_empty(featList[['transcriptomics']])){
  rnaFeatures <- get_data(object = model,features = list(transcriptomics=featList$transcriptomics),as.data.frame = TRUE) %>% 
    mutate(feature=paste0(feature,'.',view)) %>% 
    pivot_wider(id_cols = 'sample',names_from = feature,values_from = value)
  }else{rnaFeatures <- data_frame(sample=modelMeta[['sample']])}

if(!is_empty(featList[['immuneinfiltration']])){
  immuneFeatures <- get_data(object = model,features = list(immuneinfiltration=featList$immuneinfiltration),as.data.frame = TRUE) %>% 
    mutate(feature=paste0(feature,'.',view)) %>% 
    pivot_wider(id_cols = 'sample',names_from = feature,values_from = value)
  }else{immuneFeatures <- data_frame(sample=modelMeta[['sample']])}


omicFeatures <- reduce(.x = list(protFeatures,phosphoFeatures,rnaFeatures,immuneFeatures),.f = ~left_join(x = .x,y = .y,by = 'sample'))
colnames(omicFeatures) <- make.names(names = colnames(omicFeatures),unique = TRUE)

omics_variables <- omicFeatures %>% 
  dplyr::select(-sample) %>% 
  colnames()

clinical <- modelMeta %>% 
  select(
    sample,
    time=params$time,
    event=params$event,
    Age=`Age.(5-year.range,.e.g.,.35(31-35),.40(36-40),.45(41-45).etc.)`,
    Size=T.size,
    NHG,
    Treatment=TreatGroup
    # params$outcome
    ) %>%   
  mutate(
# !!params$outcome:=as.factor(.[[params$outcome]]),
         NHG=factor(NHG,levels=c('1','2','3'),ordered = FALSE),
         Size=factor(Size,levels=c('0','1'),labels=c('â‰¤20mm','>20mm')),
         Treatment=factor(Treatment,levels=c('ChemoEndo','Endo','Chemo','None'),exclude = c('Chemo','None'),ordered = FALSE)) %>%
  drop_na()

clinical_variables <- clinical %>%
  dplyr::select(-c(sample,time,event)) %>%
  colnames()

finalFeatures <- left_join(clinical,omicFeatures) %>% 
  mutate(surv=Surv(time=time,event=event)) %>% 
  select(-c(time,event))

finalFeaturesProcessed <- recipe(x =  finalFeatures) %>%
  update_role(all_of(omics_variables),all_of(clinical_variables),new_role = 'predictor') %>%
  update_role(sample,new_role = 'ID') %>%
  update_role(surv, new_role = 'outcome') %>% 
  step_relevel(NHG,ref_level = '1') %>% 
  step_relevel(Size,ref_level = 'â‰¤20mm') %>% 
  step_relevel(Treatment,ref_level = 'Endo') %>%
  step_normalize(all_of(omics_variables),Age) %>% 
  prep() %>% 
  bake(new_data=NULL)
```

### Fit Univariable Cox Model
```{r}
cox_models_omics <- map(.x = omics_variables,.f = function(x){
  data <- finalFeaturesProcessed %>% dplyr::select(sample,surv,x) 

  hr_factors <- proportional_hazards() %>% 
    set_engine('survival') %>% 
    set_mode('censored regression')

  wf <- workflow() %>%
    add_variables(outcomes = surv,predictors = x) %>% 
    add_model(hr_factors,formula = surv~.) %>% 
    fit(data=data)
  
  return(wf)
})

names(cox_models_omics) <- omics_variables

signif_omics <- map(.x = seq_along(cox_models_omics),function(x){
  model <- extract_fit_engine(cox_models_omics[[x]]) %>% 
    summary()
  pluck(model,'coefficients') %>% as.data.frame()
}) %>% 
  list_rbind() %>% 
  mutate(PValue.Adj=p.adjust(.[['Pr(>|z|)']],method = 'fdr')) %>% 
  filter(.[['Pr(>|z|)']]<0.05) %>% 
  rownames() %>% 
  as_vector() %>% 
  unique
```

#### Evaluating significant features and skipping if none are present
```{r}
# Define a function to set the eval option for subsequent chunks
conditionally_eval <- function() {
  if (is_empty(signif_omics)) {
    knitr::opts_chunk$set(eval = FALSE)
    writeLines(text = 'No variables were deemed significant (p-value < 0.01), skipping multivariate model',con = paste0(outputdir,'error.txt'))
  }
}

# Apply the function for the next chunk
conditionally_eval()
```

### Fit Multivariable Cox Model
```{r}
catchWarning <- function(expr){
  warning_message <- NULL
  warnHandler <- function(warning){
    warning_message <<- c(warning_message,list(warning))
    invokeRestart('muffleWarning')
  }
  res <- withCallingHandlers(expr = expr, warning = warnHandler)
  list(result=res,warning=warning_message)
}

cox_models_omics_multivariate <- map(.x = signif_omics,.f = function(x){
data <- finalFeaturesProcessed %>% 
  dplyr::select(sample,surv,x,all_of(clinical_variables))

hr_factors <- proportional_hazards() %>% 
  set_engine('survival') %>% 
  set_mode('censored regression')

wf <- catchWarning({workflow() %>%
    add_variables(outcomes = surv,predictors = c(x,all_of(clinical_variables))) %>% 
    add_model(hr_factors,formula = surv~.) %>% 
  fit(data=data)})
})

```

#### Select significant features and generate forest plots
```{r}
multiTable <- map(.x = seq_len(length(cox_models_omics_multivariate)),function(x){
  model <- extract_fit_engine(cox_models_omics_multivariate[[x]][['result']]) %>% 
    summary()
  tibble(Feature=pluck(model,'coefficients') %>% as.data.frame() %>% .[1,] %>% rownames(),
         pluck(model,'coefficients') %>% as_tibble() %>% .[1,],
         LogTest_pvalue=pluck(model,'logtest') %>% .[3],
         SCTest_pvalue=pluck(model,'sctest') %>% .[3],
         WaldTest_pvalue=pluck(model,'waldtest') %>% .[3])
}) %>% 
  list_rbind() %>% 
    mutate(PValue.Adj=p.adjust(.[['Pr(>|z|)']],method = 'fdr')) %>% 
    relocate(PValue.Adj,.after = `Pr(>|z|)`)

names(cox_models_omics_multivariate) <- multiTable[["Feature"]]

signifMulti <- multiTable %>% 
  filter(`Pr(>|z|)`<0.05) %>% 
  arrange(PValue.Adj)

multiCoxFilter <- keep(cox_models_omics_multivariate,names(cox_models_omics_multivariate) %in% signifMulti[["Feature"]])

# Function to log errors to a file
log_error <- function(error_message) {
  writeLines(error_message, con = paste0(outputdir,"error_log.txt"))
}

create_safe_forest_plot <- function(fit, data,index) {
  tryCatch({
    # Check proportional hazards assumption
    fitcheck <- cox.zph(fit = fit)
    
    # Attempt to create the forest plot
    plotPH <- forest_model(model = fit,exclude_infinite_cis = TRUE,recalculate_width = TRUE,recalculate_height = TRUE,format_options = forest_model_format_options(text_size = 3))
    
    # Return the fitcheck and plot as a list
    list(fitcheck = fitcheck, plotPH = plotPH)
  }, error = function(e) {
    # Handle the error by printing a message and returning default values
    error_message <- paste(Sys.time(), " - An error occurred while generating the forest plot: ", e$message, sep = "")
    message(error_message)
    log_error(error_message)
    # Return default values (NA for fitcheck and a blank plot for plotPH)
    # default_plot <- ggplot() + labs(title = "Forest plot could not be generated")
    fitUni <- extract_fit_engine(cox_models_omics[[names(multiCoxFilter[index])]])
    default_plot <- forest_model(model = fitUni,exclude_infinite_cis = TRUE,recalculate_width = TRUE,recalculate_height = TRUE,format_options = forest_model_format_options(text_size = 3))
    list(fitcheck = NA, plotPH = default_plot)
  })
}

# Generate list of plots with error handling
multivariate_res <- map(seq_along(multiCoxFilter), function(x) {
  fit <- extract_fit_engine(multiCoxFilter[[x]][['result']])
  create_safe_forest_plot(fit, finalFeaturesProcessed,index = x)
})

cairo_pdf(filename = paste0(outputdir,'forestplot_multivariable_mofa.pdf'),onefile = TRUE,width = 9,height = 9)
plots <- map(seq_along(multivariate_res),function(x){multivariate_res[[x]][[2]] %>% ggplotGrob()})
gridExtra::marrangeGrob(grobs = plots,ncol = 1,nrow = 1,top = '')
dev.off()
```