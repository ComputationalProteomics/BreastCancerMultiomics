---
title: "DIA-NN processing with Fasta for phosphosite flanking sequences and running PTM-SEA"
format:
  html:
    toc: true
    code-fold: true
    embed-resources: true
    toc-location: left
    smooth-scroll: true
    message: false
engine: knitr
editor_options: 
  chunk_output_type: console
---

# Output Directory

```{r}
if(!dir.exists(paths = '/multiomics/results/phospho_aggregation/')) {
  dir.create(path = '/multiomics/results/phospho_aggregation/',recursive = TRUE)
}
outputdir <- '/multiomics/results/phospho_aggregation/'
```

```{r}
library("Biostrings")

fastaFile <- readAAStringSet("/multiomics/data/Sergio_mergedb.fasta")

seq_name <- names(fastaFile) 
seq_name <- sapply(strsplit(seq_name, "\\|"), "[", 2)

sequence <- paste(fastaFile)
```

# Addition of phosphosite position and flanking sequence.

```{r}
library(tidyverse)

input_file <- "CycLoess-normalized.txt"
input_path <- '/multiomics/results/normalization/phosphoproteome/peptide_normalization/'
diann_df <- read_tsv(paste0(input_path,input_file))

findSite <- function(x){

  phosphosite=-1
  residue=""
  nphos=0
  # Use first protein accession if multiple
  protein <- strsplit(x[1], ";", fixed=TRUE)[[1]][1]
  y <- (match(protein,seq_name))
  pos <- regexpr(x[2], sequence[y], fixed = TRUE)[1]
  # Correction for other modifications
  cleanSeq <- str_replace(x[3],"\\(UniMod:4\\)","")
  cleanSeq <- str_replace(cleanSeq,"\\(UniMod:1\\)","")
  offsets <- gregexpr("(UniMod:21)", cleanSeq, fixed = TRUE)[[1]]
  # print(offsets)
  offset <- offsets[1]
 if (grepl(offset," ")){
    offset <- strsplit(offsets," ")[1]
  }
  # print(offset)
# For troubleshooting  
#  print (paste(x[1],x[2],x[3],offset,pos,protein))
  if (offset>-1 && pos>-1) {
    phosphosite=pos+offset-2
    residue=str_sub(cleanSeq,offset-1,offset-1)
    nphos=1
    if (length(offsets)>1) {
      offset2 <- offsets[2]
      #print(offsets)
      phosphosite=paste(phosphosite, (pos+offset2-2-11), sep=",")
      residue=paste(residue, str_sub(cleanSeq,offset-1,offset-1), sep=",")
      nphos=2
      #print(paste0("second site:",offset2," ", phosphosite))
    }
  } 
  #return(list(Phosphosite=phosphosite,Residue=residue))
  return(c(phosphosite,residue,nphos))
}

flanking <- function(q){
  p=q[1]
  x=as.integer(q[2])
  #print(x)
  protein <- strsplit(p, ";", fixed=TRUE)[[1]][1]
  y <- (match(protein,seq_name))
  #print(y)
  result <- ""
  if (x>=0) {
    if (x<8) {
      for (i in 1:(8-x)) {
        result <- paste0('_',result)
      }
    }
    first = x-7
    if (first<1){ first=1}
    last = x+7
    #print(paste0(first," ",last))
    result <- paste0(result,substring(sequence[y], first, last))
    if (last>nchar(sequence[y])) {
      diff = last-nchar(sequence[y])
      for (i in 1:diff) {
        result <- paste0(result,'_')
      }
    }
  } 
  return(result)
}

diann_df <- diann_df %>%
  group_by(Modified.Sequence,Stripped.Sequence,Protein.Group,Protein.Ids,Protein.Names,Genes,First.Protein.Description,Proteotypic) %>%
  summarise(across(starts_with("S0"), ~ mean(.x, na.rm = TRUE))) %>% as.data.frame

PhosphositeInfo <- apply(diann_df[,c("Protein.Group","Stripped.Sequence","Modified.Sequence")], 1, findSite)
Phosphosite <- PhosphositeInfo[1,]
Residue <- PhosphositeInfo[2,]
N_phos <- PhosphositeInfo[3,]

headers <- colnames(diann_df)
headers <- str_replace(headers, ".+\\\\","")
headers <- str_replace(headers,".mzML","")
headers <- str_replace(headers,".dia","")
colnames(diann_df) <- headers
diann_df <- cbind(diann_df, Phosphosite)
diann_df <- cbind(diann_df, Residue)
diann_df <- cbind(diann_df, N_phos)
diann_df <- subset(diann_df, Phosphosite>-1)
diann_df <- separate_rows(diann_df, Phosphosite, Residue, convert = TRUE)
id <- apply(diann_df[,c("Protein.Group","Phosphosite")],1,flanking)
diann_df <- cbind(id, diann_df)
id.flanking <- paste(diann_df$id, "p", sep="-")
diann_df <- cbind(id.flanking, diann_df)



write_tsv(diann_df,paste0(outputdir,input_file,".phosphopeptides_flanking.tsv"))

aggregated_df <- diann_df %>%
  group_by(id.flanking) %>%
  summarise(across(starts_with("S0"), ~ mean(.x, na.rm = TRUE)))

agg_file <- paste0(outputdir,input_file,".phosphosites_flanking_aggregated.tsv")

write_tsv(aggregated_df,agg_file)

```

# Generate design file
```{r}
designP <- "design_phospho_g1g2_g1g34.tsv"
design <- read_tsv("design_phospho_ductal.tsv")
design <- design %>% 
  mutate(Group.Info = replace(Group.Info, Group.Info == "Group3", "Groups34")) %>%
  mutate(Group.Info = replace(Group.Info, Group.Info == "Group4", "Groups34")) %>%
  select(Sample,Group.Info,group)
write_tsv(design, designP)
```



# Code below for adding comparisons to run PTM-SEA

```{r}
library(NormalyzerDE)
comparisons <- c("Group2-Group1","Groups34-Group1")
jDEName <- "group1vsgroup2Covariate"


normalyzerDE(jDEName, designPath = designP, dataPath = agg_file, comparisons = comparisons, sigThres = 0.1, sampleCol = "Sample", condCol = "Group.Info", outputDir = "g1vsg2", leastRepCount = 3, batchCol = 'group')

```

# Prepare GCT file

# Install the cmapR package for gct files if not installed

```{r}
if (!require("BiocManager", quietly = TRUE))
    install.packages("BiocManager")
BiocManager::install("cmapR")
```

```{r}
library(tidyverse)

gctFile <- "comparisons.gct"

statstable <- read_tsv(paste0("g1vsg2/",jDEName,"/",jDEName,"_stats.tsv"))
resulttable <- data.frame(statstable$id.flanking)
colnames(resulttable) <- c("id.flanking")
  
for (comp in comparisons){

  fcsign <- sign(statstable[paste0(comp,"_log2FoldChange")])
  logP=-log10(statstable[paste0(comp,"_PValue")])
  colname <- comp
  resulttable[, colname] <- NA
  resulttable[colname] = logP/fcsign
}

for (comp in comparisons){
  colname <- comp
  resulttable <- subset(resulttable, !is.na(resulttable[colname]))
}

resulttable <- resulttable[order(resulttable$id),]

rownames(resulttable)<-NULL

library(cmapR)
library(tidyverse)
gct_matrix = resulttable %>%
  tibble::column_to_rownames(var="id.flanking") %>%
  as.matrix() %>% new("GCT", mat=.)
write_gct(gct_matrix, gctFile, precision=2, appenddim = FALSE)
```

# Download database
```{r}
download.file(url = "https://raw.githubusercontent.com/broadinstitute/ssGSEA2.0/refs/heads/master/db/ptmsigdb/v2.0.0/KINASE/ptm.sig.db.KINASE.flanking.human.v2.0.0.gmt", destfile = "ptm.sig.db.KINASE.flanking.human.v2.0.0.gmt")
```

# Install PTM-SEA package if not already installed

```{r}
if (!require("devtools", quietly = TRUE)){
  install.packages("devtools")
}
devtools::install_github("nicolerg/ssGSEA2")
```

# Run ssGSEA
```{r}
library(ssGSEA2)

ptmSeaResults <- "PTM-SEA"

res = run_ssGSEA2(gctFile,
                  output.prefix = ptmSeaResults,
                  gene.set.databases = "ptm.sig.db.KINASE.flanking.human.v2.0.0.gmt",
                  output.directory = outDir,
                  sample.norm.type = "none", 
                  weight = 0.75, 
                  correl.type = "rank", 
                  statistic = "area.under.RES",
                  output.score.type = "NES", 
                  nperm = 10000, 
                  min.overlap = 5, 
                  extended.output = TRUE, 
                  global.fdr = FALSE,
                  log.file = "/tmp/run.log")

```

# Read GSEA results and filter to keep all gene sets where at least one comparison is passing the FDR cutoff
# Only keeping KINASE results.
```{r}
library(readr)
res <- read_tsv(paste0(outDir, "/", ptmSeaResults,"-combined.gct"), skip = 2)

comps <- str_replace(comparisons,"-",".")
fdrcomps <- paste0("fdr.pvalue.",comps)

filtered <- res %>% 
  filter(if_any(fdrcomps, ~.x < 0.01)) %>%
     filter(str_detect(id, "^KINASE")) %>%
        transform(id=str_replace(id,"KINASE-",""))
```


# Plot results using for loop
```{r}
library(ggplot2)
plotTreatments <- ggplot(data = filtered)

for (comp in comps)
{
  fdrp <- paste0("fdr.pvalue.",comp)
  comp1 <- str_replace(comp,"\\.","-")
  plotTreatments <- plotTreatments +
   geom_point(mapping = aes(x = .data[[comp1]],y = id,size = .data[[fdrp]],fill = {{ comp }}),shape = 21,alpha=0.85)
}

plotTreatments <- plotTreatments + 
  theme_bw() + 
  labs( x = 'Normalized Enrichment Score',y='',title = 'PTM-SEA KINASE') + 
  scale_radius("q-values", trans="log10", range=c(6, 1), limits=c(0.001,0.5))+
  scale_fill_discrete('Experiment',type = c('#ca0020','#0571b0'))

ptmSeaPlotFile <- "PTM-SEA_scanb2023.png"
ggsave(filename = ptmSeaPlotFile,plot = plotTreatments,device = 'png',path = outDir,units = 'in',width = 9,height = 7,dpi = 600)
```

