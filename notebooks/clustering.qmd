---
title: "Unsupervised Clustering"
author: "Sergio Mosquim Junior"
format:
  html:
    toc: true
    code-fold: true
    embed-resources: true
    toc-location: left
    smooth-scroll: true
engine: knitr
---

# Requires Packages:
```{r required packages}
#| message: false
#| warning: false

set.seed(123)
library(tidyverse)
library(ComplexHeatmap)
library(grid)
library(ggplotify)
library(factoextra)
library(cluster)
library(cowplot)
library(colorspace)
source(file = '~/multiomics/notebooks/medianFiltering.R',chdir = TRUE)
source(file = '~/multiomics/notebooks/gprofiler_enrichment.R',chdir = TRUE)
```

# Unsupervised Clustering
## Ductal vs Lobular
```{r}
if(!dir.exists(paths = '~/multiomics/results/figures/clustering/DuctalvsLobular')) {
  dir.create(path = '~/multiomics/results/figures/clustering/DuctalvsLobular',recursive = TRUE)
}
```

### Consensus Clustering Info
```{r}
ccProt <- read_csv(file = '~/multiomics/results/consensus_clustering/DuctalvsLobular/proteome/proteome.k=6.consensusClass.csv',col_names = c('sample_id','CC.Prot'))
ccPhospho <- read_csv(file = '~/multiomics/results/consensus_clustering/DuctalvsLobular/phosphoproteome/phosphoproteome.k=4.consensusClass.csv',col_names = c('sample_id','CC.Phospho'))
ccRNA <- read_csv(file = '~/multiomics/results/consensus_clustering/DuctalvsLobular/transcriptome/transcriptome.k=7.consensusClass.csv',col_names = c('sample_id','CC.RNA'))

ccAll <- full_join(ccProt,ccPhospho) %>% full_join(.,ccRNA)
```

### Proteome
#### Load Data
```{r}
data <- read_tsv(file = '~/multiomics/results/batchcorrection/fullproteome/cycloess_rollup_genes_batchcorrected.tsv') %>% 
  drop_na
design <- read_tsv(file = '~/multiomics/results/design_files/design_Full_noPool.tsv') %>% 
  left_join(.,ccAll)
```

#### Preprocessing
```{r}
proteinDataFiltered <- medianFiltering(data = data,design = design,sampleCol = 'sample_id',annotation = 'Genes',cutoff = 0.75)

proteinDataFiltered <- proteinDataFiltered %>% 
  dplyr::select(Protein,design$sample_id)

proteinDataReduced <- proteinDataFiltered %>% 
  dplyr::select(design$sample_id)
```

#### Optimal Number of clusters
```{r}
factoextra::fviz_nbclust(proteinDataReduced, kmeans, method = "silhouette",k.max = 10,print.summary = TRUE,iter.max=100)
```

#### Plotting
```{r}
calZScore <- function(x) (x-mean(x))/sd(x)

proteindataNorm <- t(apply(proteinDataReduced,1,calZScore))
colnames(proteindataNorm) <- NULL
```

```{r}
# Setting colors
groupCol <- colorspace::divergex_hcl(n = 6) %>% setNames(nm = paste0('Group',1:6))
nhgCol <- colorspace::sequential_hcl(n = 3,palette = 'Light Grays',rev = TRUE) %>% setNames(nm = c(1:3))
dfrCol <- colorspace::sequential_hcl(n = 2,palette = 'Light Grays',l2 = 80,rev = TRUE) %>% setNames(nm = c(0:1))
clusterCol <- colorspace::sequential_hcl(n = 6,palette = 'Purple-Yellow') %>% setNames(nm = c(1:6))
```

```{r}
annotationColumn <- HeatmapAnnotation(Group=anno_simple(x = design$Group.Info,
                                                        col =groupCol,
                                                        na_col = 'white',
                                                        gp = gpar(title='Group')),
                                      NHG=anno_simple(x = design$NHG,
                                                      col = nhgCol,
                                                      gp = gpar(title='NHS')),
                                      Recurrence=anno_simple(x = design$DRFi_event,
                                                             col = dfrCol,
                                                             gp = gpar(title='Recurrence')),
                                      Batch=anno_simple(x = design$batch,
                                                             col = setNames(dfrCol,c('1','2')),
                                                             gp = gpar(title='Batch')),
                                      BCFi=anno_simple(x = design$BCFi_event,
                                                             col = dfrCol,
                                                             gp = gpar(title='Breast Cancer Recurrence')),
                                      InvasiveType=anno_simple(x = design$InvCa.type,
                                                       col = setNames(dfrCol,c('Ductal','Lobular')),
                                                       na_col = 'white',
                                                       gp = gpar(title='InvasiveType')),
                                      Proteome.Cluster=anno_simple(x = design$CC.Prot,
                                                                   col = clusterCol))

legendNHG <- Legend(labels = levels(factor(design$NHG)),
                      title = 'NHG',
                      border = 'black',
                      legend_gp = gpar(fill=nhgCol))
legendRecurrence <- Legend(labels = levels(factor(design$DRFi_event)),
                      title = 'Recurrence',
                      border = 'black',
                      legend_gp = gpar(fill=setNames(dfrCol,c('0','1'))))
legendBatch <- Legend(labels = levels(factor(design$batch)),
                      title = 'Batch',
                      border = 'black',
                      legend_gp = gpar(fill=setNames(dfrCol,c('1','2'))))
legendBCFi <- Legend(labels = c('Yes','No'),
                      title = 'Breast Cancer Recurrence',
                      border = 'black',
                      legend_gp = gpar(fill=dfrCol))

legendGroup <- Legend(labels = levels(factor(design$Group.Info)),
                      title = 'Group',
                      border = 'black',
                      legend_gp = gpar(fill=groupCol))

legendInvType <- Legend(labels = c('Ductal','Lobular'),
                   title = 'Invasive Type',
                   border = 'black',
                   legend_gp = gpar(fill=setNames(dfrCol,c('Ductal','Lobular'))))
legendCluster <- Legend(labels = levels(factor(design$CC.Prot)),
                        title = 'Proteome Cluster',
                        legend_gp = gpar(fill=clusterCol),
                        border = 'black')

allLegends <- packLegend(legendGroup,legendNHG,legendRecurrence,legendBatch,legendBCFi,legendInvType,legendCluster)

proteinHeatmap <- Heatmap(matrix = proteindataNorm,top_annotation = annotationColumn, name = 'Protein intensity',heatmap_legend_param = list(legend_direction = 'horizontal'),cluster_rows = TRUE,cluster_row_slices = TRUE,row_km = 5,column_split = design$CC.Prot)
```

##### Functional enrichment per protein cluster
```{r}
protHeatmap <- draw(proteinHeatmap)
rowOrder <- row_order(protHeatmap)
protGroups <- purrr::map(.x = seq_along(rowOrder),.f = ~(proteinDataFiltered$Protein[rowOrder[[.x]]]))
proteinDataFiltered$Protein.Cluster[proteinDataFiltered$Protein %in% protGroups[[1]]] <- 'Cluster1'
proteinDataFiltered$Protein.Cluster[proteinDataFiltered$Protein %in% protGroups[[2]]] <- 'Cluster2'
proteinDataFiltered$Protein.Cluster[proteinDataFiltered$Protein %in% protGroups[[3]]] <- 'Cluster3'
proteinDataFiltered$Protein.Cluster[proteinDataFiltered$Protein %in% protGroups[[4]]] <- 'Cluster4'
proteinDataFiltered$Protein.Cluster[proteinDataFiltered$Protein %in% protGroups[[5]]] <- 'Cluster5'

enrichResults <- gprofilerEnrichment(data = proteinDataFiltered,clusterCol = 'Protein.Cluster',idCol = 'Protein',sep = ';')
teste <- enrichResults %>% 
  map(.f = function(x){pluck(x,'result')}) %>% 
  map(.f = ~filter(.,source %in% c('GO:BP','GO:MF','REAC') & term_size<150)) %>% 
  map(~slice_min(.,order_by = p_value,n = 5,with_ties = FALSE)) %>% 
  map(~dplyr::select(.,term_name)) %>% 
  map(unlist) %>% 
  setNames(.,c(1:5))
splitRow <- rowOrder %>% 
  map(as.data.frame) %>% 
  list_rbind(names_to = 'order') %>% 
  arrange(.[[2]])

testehp <- Heatmap(matrix = proteindataNorm,top_annotation = annotationColumn, name = 'Protein intensity',heatmap_legend_param = list(legend_direction = 'horizontal'),cluster_rows = TRUE,cluster_row_slices = TRUE,column_split = design$CC.Prot,row_split = splitRow[[1]],right_annotation = rowAnnotation(textbox=anno_textbox(splitRow[[1]],teste,by = 'anno_block',background_gp = gpar(fill='transparent'),just='left',max_width=unit(1,'mm'),gp=gpar(col='black',fontsize=8,lwd = 0),padding=unit(1,'mm'))),show_row_names = FALSE)
```
##### Generate figure and export
```{r}
proteinHeatmapDraw <- grid.grabExpr(draw(testehp,annotation_legend_list = allLegends, heatmap_legend_side = 'bottom', annotation_legend_side = 'right', legend_grouping = 'original')) %>% as.ggplot

ggsave2(filename = 'kmeans_proteome_test.pdf',plot = proteinHeatmapDraw,device = 'pdf',path = '~/multiomics/results/figures/clustering/DuctalvsLobular',dpi = 600,width = 12,height = 12,units = 'in')
```

### Phosphoproteome
#### Load Data
```{r}
data <- read_tsv(file = '~/multiomics/results/batchcorrection/phosphoproteome/cycloess_peptide_batchcorrected.tsv') %>% 
  drop_na
design <- read_tsv(file = '~/multiomics/results/design_files/design_phospho_noPool.tsv')
```
#### Preprocessing
```{r}
phosphoDataFiltered <- medianFiltering(data = data,design = design,sampleCol = 'sample_id',annotation = 'Genes')

phosphoDataFiltered <- phosphoDataFiltered %>% 
  dplyr::select(Protein,design$sample_id)

phosphoDataReduced <- phosphoDataFiltered %>% 
  dplyr::select(design$sample_id)
```
#### Optimal Number of clusters
```{r}
factoextra::fviz_nbclust(phosphoDataReduced, kmeans, method = "silhouette",k.max = 10,print.summary = TRUE,iter.max=100)
```
#### Plotting
```{r}
calZScore <- function(x) (x-mean(x))/sd(x)

phosphoDataNorm <- t(apply(phosphoDataReduced,1,calZScore))
colnames(phosphoDataNorm) <- NULL
annotationColumn <- HeatmapAnnotation(Group=anno_simple(x = design$Group.Info,
                                                        col = c('Group1'='#e31a1c','Group2'='#fb9a99','Group3'='#1f78b4','Group4'='#a6cee3','Group5'='#33a02c','Group6'='darkblue'),
                                                        na_col = '#808080',
                                                        gp = gpar(title='Group')),
                                      NHG=anno_simple(x = design$NHG,
                                                      col = c('1'='#4daf4a','2'='#377eb8','3'='#e41a1c'),
                                                      gp = gpar(title='NHS')),
                                      Recurrence=anno_simple(x = design$DRFi_event,
                                                             col = c('1'='black','0'='white'),
                                                             gp = gpar(title='Recurrence')),
                                      Treatment=anno_simple(x = design$TreatGroup,
                                                            col = c('Endo'='#984ea3','ChemoEndo'='#ff7f00','Chemo'='#e41a1c','None'='white'),
                                                            gp = gpar(title='Treatment')),
                                      Batch=anno_simple(x = design$batch,
                                                             col = c('1'='black','2'='white'),
                                                             gp = gpar(title='Batch')),
                                      BCFi=anno_simple(x = design$BCFi_event,
                                                             col = c('1'='black','0'='white'),
                                                             gp = gpar(title='Breast Cancer Recurrence')),
                                      InvasiveType=anno_simple(x = design$InvCa.type,
                                                       col = c('Ductal'='#000000','Lobular'='#ffffff'),
                                                       na_col = '#808080',
                                                       gp = gpar(title='InvasiveType')))

legendNHG <- Legend(labels = c('1','2','3'),
                      title = 'NHG',
                      border = 'black',
                      legend_gp = gpar(fill=c('1'='#4daf4a','2'='#377eb8','3'='#e41a1c')))
legendRecurrence <- Legend(labels = c('1','0'),
                      title = 'Recurrence',
                      border = 'black',
                      legend_gp = gpar(fill=c('1'='black','0'='white')))
legendTreatment <- Legend(labels = c('Endo','ChemoEndo'),
                      title = 'Treatment',
                      border = 'black',
                      legend_gp = gpar(fill=c('Endo'='#984ea3','ChemoEndo'='#ff7f00','Chemo'='#e41a1c','None'='white')))
legendBatch <- Legend(labels = c('1','2'),
                      title = 'Batch',
                      border = 'black',
                      legend_gp = gpar(fill=c('1'='black','2'='white')))
legendBCFi <- Legend(labels = c('Yes','No'),
                      title = 'Breast Cancer Recurrence',
                      border = 'black',
                      legend_gp = gpar(fill=c('Yes'='black','No'='white')))

legendGroup <- Legend(labels = c('Group1','Group2','Group3','Group4','Group5','Group6'),
                      title = 'Group',
                      border = 'black',
                      legend_gp = gpar(fill=c('Group1'='#e31a1c','Group2'='#fb9a99','Group3'='#1f78b4','Group4'='#a6cee3','Group5'='#33a02c','Group6'='darkblue')))

legendInvType <- Legend(labels = c('Ductal','Lobular'),
                   title = 'Invasive Type',
                   border = 'black',
                   legend_gp = gpar(fill=c('Ductal'='#000000','Lobular'='#ffffff')))

allLegends <- packLegend(legendGroup,legendNHG,legendRecurrence,legendTreatment,legendBatch,legendBCFi,legendInvType)

phosphoHeatmap <- Heatmap(matrix = phosphoDataNorm,top_annotation = annotationColumn, name = 'Protein intensity',heatmap_legend_param = list(legend_direction = 'horizontal'),column_km = 2,column_km_repeats = 1000)

phosphoHeatmapDraw <- grid.grabExpr(draw(phosphoHeatmap,annotation_legend_list = allLegends, heatmap_legend_side = 'bottom', annotation_legend_side = 'right', legend_grouping = 'original')) %>% as.ggplot

ggsave2(filename = 'kmeans_phospho.pdf',plot = phosphoHeatmapDraw,device = 'pdf',path = '~/multiomics/results/figures/clustering/DuctalvsLobular',dpi = 600,width = 12,height = 12,units = 'in')
```

### Transcriptome
#### Load Data
```{r}
data <- read_tsv(file = '~/multiomics/data/transcriptomics/genematrix_filtered_adjusted_centered.tsv') %>% 
  drop_na
design <- read_tsv(file = '~/multiomics/results/design_files/design_RNA_noPool.tsv')
```
#### Preprocessing
```{r}
rnaDataFiltered <- medianFiltering(data = data,design = design,sampleCol = 'sample_id',annotation = 'Gene.ID')

rnaDataFiltered <- rnaDataFiltered %>% 
  dplyr::select(Gene.ID,design$sample_id)

rnaDataReduced <- rnaDataFiltered %>% 
  dplyr::select(design$sample_id)
```
#### Optimal Number of clusters
```{r}
factoextra::fviz_nbclust(rnaDataReduced, kmeans, method = "silhouette",k.max = 10,print.summary = TRUE,iter.max=100)
```
#### Plotting
```{r}
calZScore <- function(x) (x-mean(x))/sd(x)

rnaDataNorm <- t(apply(rnaDataReduced,1,calZScore))
colnames(rnaDataNorm) <- NULL
annotationColumn <- HeatmapAnnotation(Group=anno_simple(x = design$Group.Info,
                                                        col = c('Group1'='#e31a1c','Group2'='#fb9a99','Group3'='#1f78b4','Group4'='#a6cee3','Group5'='#33a02c','Group6'='darkblue'),
                                                        na_col = '#808080',
                                                        gp = gpar(title='Group')),
                                      NHG=anno_simple(x = design$NHG,
                                                      col = c('1'='#4daf4a','2'='#377eb8','3'='#e41a1c'),
                                                      gp = gpar(title='NHS')),
                                      Recurrence=anno_simple(x = design$DRFi_event,
                                                             col = c('1'='black','0'='white'),
                                                             gp = gpar(title='Recurrence')),
                                      Treatment=anno_simple(x = design$TreatGroup,
                                                            col = c('Endo'='#984ea3','ChemoEndo'='#ff7f00','Chemo'='#e41a1c','None'='white'),
                                                            gp = gpar(title='Treatment')),
                                      Batch=anno_simple(x = design$batch,
                                                             col = c('1'='black','2'='white'),
                                                             gp = gpar(title='Batch')),
                                      BCFi=anno_simple(x = design$BCFi_event,
                                                             col = c('1'='black','0'='white'),
                                                             gp = gpar(title='Breast Cancer Recurrence')),
                                      InvasiveType=anno_simple(x = design$InvCa.type,
                                                       col = c('Ductal'='#000000','Lobular'='#ffffff'),
                                                       na_col = '#808080',
                                                       gp = gpar(title='InvasiveType')))

legendNHG <- Legend(labels = c('1','2','3'),
                      title = 'NHG',
                      border = 'black',
                      legend_gp = gpar(fill=c('1'='#4daf4a','2'='#377eb8','3'='#e41a1c')))
legendRecurrence <- Legend(labels = c('1','0'),
                      title = 'Recurrence',
                      border = 'black',
                      legend_gp = gpar(fill=c('1'='black','0'='white')))
legendTreatment <- Legend(labels = c('Endo','ChemoEndo'),
                      title = 'Treatment',
                      border = 'black',
                      legend_gp = gpar(fill=c('Endo'='#984ea3','ChemoEndo'='#ff7f00','Chemo'='#e41a1c','None'='white')))
legendBatch <- Legend(labels = c('1','2'),
                      title = 'Batch',
                      border = 'black',
                      legend_gp = gpar(fill=c('1'='black','2'='white')))
legendBCFi <- Legend(labels = c('Yes','No'),
                      title = 'Breast Cancer Recurrence',
                      border = 'black',
                      legend_gp = gpar(fill=c('Yes'='black','No'='white')))

legendGroup <- Legend(labels = c('Group1','Group2','Group3','Group4','Group5','Group6'),
                      title = 'Group',
                      border = 'black',
                      legend_gp = gpar(fill=c('Group1'='#e31a1c','Group2'='#fb9a99','Group3'='#1f78b4','Group4'='#a6cee3','Group5'='#33a02c','Group6'='darkblue')))

legendInvType <- Legend(labels = c('Ductal','Lobular'),
                   title = 'Invasive Type',
                   border = 'black',
                   legend_gp = gpar(fill=c('Ductal'='#000000','Lobular'='#ffffff')))

allLegends <- packLegend(legendGroup,legendNHG,legendRecurrence,legendTreatment,legendBatch,legendBCFi,legendInvType)

rnaHeatmap <- Heatmap(matrix = rnaDataNorm,top_annotation = annotationColumn, name = 'Gene Expression',heatmap_legend_param = list(legend_direction = 'horizontal'),column_km = 2,column_km_repeats = 1000)

rnaHeatmapDraw <- grid.grabExpr(draw(rnaHeatmap,annotation_legend_list = allLegends, heatmap_legend_side = 'bottom', annotation_legend_side = 'right', legend_grouping = 'original')) %>% as.ggplot

ggsave2(filename = 'kmeans_transcriptome.pdf',plot = rnaHeatmapDraw,device = 'pdf',path = '~/multiomics/results/figures/clustering/DuctalvsLobular',dpi = 600,width = 12,height = 12,units = 'in')
```



## LN+ vs LN-
### Ductal
```{r}
if(!dir.exists(paths = '~/multiomics/results/figures/clustering/LNposvsLNneg/Ductal')) {
  dir.create(path = '~/multiomics/results/figures/clustering/LNposvsLNneg/Ductal',recursive = TRUE)
}
```

#### Consensus Clustering Info
```{r}
# ccProt <- read_csv(file = '~/multiomics/results/consensus_clustering/LNposvsLNneg/Ductal/proteome/proteome.k=6.consensusClass.csv',col_names = c('sample_id','CC.Prot'))
# ccPhospho <- read_csv(file = '~/multiomics/results/consensus_clustering/LNposvsLNneg/Ductal/phosphoproteome/phosphoproteome/proteome.k=6.consensusClass.csv',col_names = c('sample_id','CC.Phospho'))
# ccRNA <- read_csv(file = '~/multiomics/results/consensus_clustering/LNposvsLNneg/Ductal/transcriptome/transcriptome/proteome.k=6.consensusClass.csv',col_names = c('sample_id','CC.RNA'))
# 
# ccAll <- full_join(ccProt,ccPhospho) %>% full_join(.,ccRNA)
```
#### Proteome
##### Load Data
```{r}
data <- read_tsv(file = '~/multiomics/results/batchcorrection/fullproteome/cycloess_rollup_genes_batchcorrected.tsv') %>% 
  drop_na
design <- read_tsv(file = '~/multiomics/results/design_files/design_full_ductal.tsv')
```
##### Preprocessing
```{r}
proteinDataFiltered <- medianFiltering(data = data,design = design,sampleCol = 'sample_id',annotation = 'Genes')

proteinDataFiltered <- proteinDataFiltered %>% 
  dplyr::select(Protein,design$sample_id)

proteinDataReduced <- proteinDataFiltered %>% 
  dplyr::select(design$sample_id)
```
##### Optimal Number of clusters
```{r}
factoextra::fviz_nbclust(proteinDataReduced, kmeans, method = "silhouette",k.max = 10,print.summary = TRUE,iter.max=100)

```
##### Plotting
```{r}
calZScore <- function(x) (x-mean(x))/sd(x)

proteindataNorm <- t(apply(proteinDataReduced,1,calZScore))
colnames(proteindataNorm) <- NULL
annotationColumn <- HeatmapAnnotation(Group=anno_simple(x = design$Group.Info,
                                                        col = c('Group1'='#e31a1c','Group2'='#fb9a99','Group3'='#1f78b4','Group4'='#a6cee3'),
                                                        na_col = '#808080',
                                                        gp = gpar(title='Group')),
                                      NHG=anno_simple(x = design$NHG,
                                                      col = c('1'='#4daf4a','2'='#377eb8','3'='#e41a1c'),
                                                      gp = gpar(title='NHS')),
                                      Recurrence=anno_simple(x = design$DRFi_event,
                                                             col = c('1'='black','0'='white'),
                                                             gp = gpar(title='Recurrence')),
                                      Treatment=anno_simple(x = design$TreatGroup,
                                                            col = c('Endo'='#984ea3','ChemoEndo'='#ff7f00','Chemo'='#e41a1c','None'='white'),
                                                            gp = gpar(title='Treatment')),
                                      Batch=anno_simple(x = design$batch,
                                                             col = c('1'='black','2'='white'),
                                                             gp = gpar(title='Batch')),
                                      BCFi=anno_simple(x = design$BCFi_event,
                                                             col = c('1'='black','0'='white'),
                                                             gp = gpar(title='Breast Cancer Recurrence')),
                                      LN=anno_simple(x = design$LN,
                                                     col = c('1'='black','0'='white'),
                                                     gp = gpar(title='Lymph Node Status')),
                                      LNspec=anno_simple(x = design$LN.spec,
                                                         col = c('N0'='white','1to3'='darkgrey','4toX'='black'),
                                                         gp = gpar(title='Lymph Node Status Amplified')))

legendNHG <- Legend(labels = c('1','2','3'),
                      title = 'NHG',
                      border = 'black',
                      legend_gp = gpar(fill=c('1'='#4daf4a','2'='#377eb8','3'='#e41a1c')))
legendRecurrence <- Legend(labels = c('1','0'),
                      title = 'Recurrence',
                      border = 'black',
                      legend_gp = gpar(fill=c('1'='black','0'='white')))
legendTreatment <- Legend(labels = c('Endo','ChemoEndo'),
                      title = 'Treatment',
                      border = 'black',
                      legend_gp = gpar(fill=c('Endo'='#984ea3','ChemoEndo'='#ff7f00','Chemo'='#e41a1c','None'='white')))
legendBatch <- Legend(labels = c('1','2'),
                      title = 'Batch',
                      border = 'black',
                      legend_gp = gpar(fill=c('1'='black','2'='white')))
legendBCFi <- Legend(labels = c('Yes','No'),
                      title = 'Breast Cancer Recurrence',
                      border = 'black',
                      legend_gp = gpar(fill=c('Yes'='black','No'='white')))

legendGroup <- Legend(labels = c('Group1','Group2','Group3','Group4'),
                      title = 'Group',
                      border = 'black',
                      legend_gp = gpar(fill=c('Group1'='#e31a1c','Group2'='#fb9a99','Group3'='#1f78b4','Group4'='#a6cee3')))
legendLN <- Legend(labels = c('1','0'),
                   title = 'LN Status',
                   border = 'black',
                   legend_gp = gpar(fill=c('1'='black','0'='white')))
legendLNspec <- Legend(labels = c('N0','1to3','4toX'),
                       title = 'LN Status Amplified',
                       border = 'black',
                       legend_gp = gpar(fill=c('N0'='white','1to3'='darkgrey','4toX'='black')))


allLegends <- packLegend(legendGroup,legendNHG,legendRecurrence,legendTreatment,legendBatch,legendBCFi,legendLN,legendLNspec)

proteinHeatmap <- Heatmap(matrix = proteindataNorm,top_annotation = annotationColumn, name = 'Protein intensity',heatmap_legend_param = list(legend_direction = 'horizontal'),column_km = 2,column_km_repeats = 1000)

proteinHeatmapDraw <- grid.grabExpr(draw(proteinHeatmap,annotation_legend_list = allLegends, heatmap_legend_side = 'bottom', annotation_legend_side = 'right', legend_grouping = 'original')) %>% as.ggplot

ggsave2(filename = 'kmeans_proteome.pdf',plot = proteinHeatmapDraw,device = 'pdf',path = '~/multiomics/results/figures/clustering/LNposvsLNneg/Ductal',dpi = 600,width = 12,height = 12,units = 'in')
```

#### Phosphoproteome
##### Load Data
```{r}
data <- read_tsv(file = '~/multiomics/results/batchcorrection/phosphoproteome/cycloess_peptide_batchcorrected.tsv') %>% 
  drop_na
design <- read_tsv(file = '~/multiomics/results/design_files/design_phospho_ductal.tsv')
```
##### Preprocessing
```{r}
phosphoDataFiltered <- medianFiltering(data = data,design = design,sampleCol = 'sample_id',annotation = 'Genes')

phosphoDataFiltered <- phosphoDataFiltered %>% 
  dplyr::select(Protein,design$sample_id)

phosphoDataReduced <- phosphoDataFiltered %>% 
  dplyr::select(design$sample_id)
```
##### Optimal Number of clusters
```{r}
factoextra::fviz_nbclust(phosphoDataReduced, kmeans, method = "silhouette",k.max = 10,print.summary = TRUE,iter.max=100)
```
##### Plotting
```{r}
calZScore <- function(x) (x-mean(x))/sd(x)

phosphoDataNorm <- t(apply(phosphoDataReduced,1,calZScore))
colnames(phosphoDataNorm) <- NULL
annotationColumn <- HeatmapAnnotation(Group=anno_simple(x = design$Group.Info,
                                                        col = c('Group1'='#e31a1c','Group2'='#fb9a99','Group3'='#1f78b4','Group4'='#a6cee3'),
                                                        na_col = '#808080',
                                                        gp = gpar(title='Group')),
                                      NHG=anno_simple(x = design$NHG,
                                                      col = c('1'='#4daf4a','2'='#377eb8','3'='#e41a1c'),
                                                      gp = gpar(title='NHS')),
                                      Recurrence=anno_simple(x = design$DRFi_event,
                                                             col = c('1'='black','0'='white'),
                                                             gp = gpar(title='Recurrence')),
                                      Treatment=anno_simple(x = design$TreatGroup,
                                                            col = c('Endo'='#984ea3','ChemoEndo'='#ff7f00','Chemo'='#e41a1c','None'='white'),
                                                            gp = gpar(title='Treatment')),
                                      Batch=anno_simple(x = design$batch,
                                                             col = c('1'='black','2'='white'),
                                                             gp = gpar(title='Batch')),
                                      BCFi=anno_simple(x = design$BCFi_event,
                                                             col = c('1'='black','0'='white'),
                                                             gp = gpar(title='Breast Cancer Recurrence')),
                                      LN=anno_simple(x = design$LN,
                                                     col = c('1'='black','0'='white'),
                                                     gp = gpar(title='Lymph Node Status')),
                                      LNspec=anno_simple(x = design$LN.spec,
                                                         col = c('N0'='white','1to3'='darkgrey','4toX'='black'),
                                                         gp = gpar(title='Lymph Node Status Amplified')))

legendNHG <- Legend(labels = c('1','2','3'),
                      title = 'NHG',
                      border = 'black',
                      legend_gp = gpar(fill=c('1'='#4daf4a','2'='#377eb8','3'='#e41a1c')))
legendRecurrence <- Legend(labels = c('1','0'),
                      title = 'Recurrence',
                      border = 'black',
                      legend_gp = gpar(fill=c('1'='black','0'='white')))
legendTreatment <- Legend(labels = c('Endo','ChemoEndo'),
                      title = 'Treatment',
                      border = 'black',
                      legend_gp = gpar(fill=c('Endo'='#984ea3','ChemoEndo'='#ff7f00','Chemo'='#e41a1c','None'='white')))
legendBatch <- Legend(labels = c('1','2'),
                      title = 'Batch',
                      border = 'black',
                      legend_gp = gpar(fill=c('1'='black','2'='white')))
legendBCFi <- Legend(labels = c('Yes','No'),
                      title = 'Breast Cancer Recurrence',
                      border = 'black',
                      legend_gp = gpar(fill=c('Yes'='black','No'='white')))

legendGroup <- Legend(labels = c('Group1','Group2','Group3','Group4'),
                      title = 'Group',
                      border = 'black',
                      legend_gp = gpar(fill=c('Group1'='#e31a1c','Group2'='#fb9a99','Group3'='#1f78b4','Group4'='#a6cee3')))

legendLN <- Legend(labels = c('1','0'),
                   title = 'LN Status',
                   border = 'black',
                   legend_gp = gpar(fill=c('1'='black','0'='white')))
legendLNspec <- Legend(labels = c('N0','1to3','4toX'),
                       title = 'LN Status Amplified',
                       border = 'black',
                       legend_gp = gpar(fill=c('N0'='white','1to3'='darkgrey','4toX'='black')))


allLegends <- packLegend(legendGroup,legendNHG,legendRecurrence,legendTreatment,legendBatch,legendBCFi,legendLN,legendLNspec)

phosphoHeatmap <- Heatmap(matrix = phosphoDataNorm,top_annotation = annotationColumn, name = 'Protein intensity',heatmap_legend_param = list(legend_direction = 'horizontal'),column_km = 2,column_km_repeats = 1000)

phosphoHeatmapDraw <- grid.grabExpr(draw(phosphoHeatmap,annotation_legend_list = allLegends, heatmap_legend_side = 'bottom', annotation_legend_side = 'right', legend_grouping = 'original')) %>% as.ggplot

ggsave2(filename = 'kmeans_phospho.pdf',plot = phosphoHeatmapDraw,device = 'pdf',path = '~/multiomics/results/figures/clustering/LNposvsLNneg/Ductal',dpi = 600,width = 12,height = 12,units = 'in')
```

#### Transcriptome
##### Load Data
```{r}
data <- read_tsv(file = '~/multiomics/data/transcriptomics/genematrix_filtered_adjusted_centered.tsv') %>% 
  drop_na
design <- read_tsv(file = '~/multiomics/results/design_files/design_RNA_ductal.tsv')
```
##### Preprocessing
```{r}
rnaDataFiltered <- medianFiltering(data = data,design = design,sampleCol = 'sample_id',annotation = 'Gene.ID')

rnaDataFiltered <- rnaDataFiltered %>% 
  dplyr::select(Gene.ID,design$sample_id)

rnaDataReduced <- rnaDataFiltered %>% 
  dplyr::select(design$sample_id)
```
##### Optimal Number of clusters
```{r}
factoextra::fviz_nbclust(rnaDataReduced, kmeans, method = "silhouette",k.max = 10,print.summary = TRUE,iter.max=100)
```
##### Plotting
```{r}
calZScore <- function(x) (x-mean(x))/sd(x)

rnaDataNorm <- t(apply(rnaDataReduced,1,calZScore))
colnames(rnaDataNorm) <- NULL
annotationColumn <- HeatmapAnnotation(Group=anno_simple(x = design$Group.Info,
                                                        col = c('Group1'='#e31a1c','Group2'='#fb9a99','Group3'='#1f78b4','Group4'='#a6cee3'),
                                                        na_col = '#808080',
                                                        gp = gpar(title='Group')),
                                      NHG=anno_simple(x = design$NHG,
                                                      col = c('1'='#4daf4a','2'='#377eb8','3'='#e41a1c'),
                                                      gp = gpar(title='NHS')),
                                      Recurrence=anno_simple(x = design$DRFi_event,
                                                             col = c('1'='black','0'='white'),
                                                             gp = gpar(title='Recurrence')),
                                      Treatment=anno_simple(x = design$TreatGroup,
                                                            col = c('Endo'='#984ea3','ChemoEndo'='#ff7f00','Chemo'='#e41a1c','None'='white'),
                                                            gp = gpar(title='Treatment')),
                                      Batch=anno_simple(x = design$batch,
                                                             col = c('1'='black','2'='white'),
                                                             gp = gpar(title='Batch')),
                                      BCFi=anno_simple(x = design$BCFi_event,
                                                             col = c('1'='black','0'='white'),
                                                             gp = gpar(title='Breast Cancer Recurrence')),
                                      LN=anno_simple(x = design$LN,
                                                     col = c('1'='black','0'='white'),
                                                     gp = gpar(title='Lymph Node Status')),
                                      LNspec=anno_simple(x = design$LN.spec,
                                                         col = c('N0'='white','1to3'='darkgrey','4toX'='black'),
                                                         gp = gpar(title='Lymph Node Status Amplified')))

legendNHG <- Legend(labels = c('1','2','3'),
                      title = 'NHG',
                      border = 'black',
                      legend_gp = gpar(fill=c('1'='#4daf4a','2'='#377eb8','3'='#e41a1c')))
legendRecurrence <- Legend(labels = c('1','0'),
                      title = 'Recurrence',
                      border = 'black',
                      legend_gp = gpar(fill=c('1'='black','0'='white')))
legendTreatment <- Legend(labels = c('Endo','ChemoEndo'),
                      title = 'Treatment',
                      border = 'black',
                      legend_gp = gpar(fill=c('Endo'='#984ea3','ChemoEndo'='#ff7f00','Chemo'='#e41a1c','None'='white')))
legendBatch <- Legend(labels = c('1','2'),
                      title = 'Batch',
                      border = 'black',
                      legend_gp = gpar(fill=c('1'='black','2'='white')))
legendBCFi <- Legend(labels = c('Yes','No'),
                      title = 'Breast Cancer Recurrence',
                      border = 'black',
                      legend_gp = gpar(fill=c('Yes'='black','No'='white')))

legendGroup <- Legend(labels = c('Group1','Group2','Group3','Group4'),
                      title = 'Group',
                      border = 'black',
                      legend_gp = gpar(fill=c('Group1'='#e31a1c','Group2'='#fb9a99','Group3'='#1f78b4','Group4'='#a6cee3')))

legendLN <- Legend(labels = c('1','0'),
                   title = 'LN Status',
                   border = 'black',
                   legend_gp = gpar(fill=c('1'='black','0'='white')))
legendLNspec <- Legend(labels = c('N0','1to3','4toX'),
                       title = 'LN Status Amplified',
                       border = 'black',
                       legend_gp = gpar(fill=c('N0'='white','1to3'='darkgrey','4toX'='black')))


allLegends <- packLegend(legendGroup,legendNHG,legendRecurrence,legendTreatment,legendBatch,legendBCFi,legendLN,legendLNspec)

rnaHeatmap <- Heatmap(matrix = rnaDataNorm,top_annotation = annotationColumn, name = 'Gene Expression',heatmap_legend_param = list(legend_direction = 'horizontal'),column_km = 2,column_km_repeats = 1000)

rnaHeatmapDraw <- grid.grabExpr(draw(rnaHeatmap,annotation_legend_list = allLegends, heatmap_legend_side = 'bottom', annotation_legend_side = 'right', legend_grouping = 'original')) %>% as.ggplot

ggsave2(filename = 'kmeans_transcriptome.pdf',plot = rnaHeatmapDraw,device = 'pdf',path = '~/multiomics/results/figures/clustering/LNposvsLNneg/Ductal',dpi = 600,width = 12,height = 12,units = 'in')
```



### Lobular
```{r}
if(!dir.exists(paths = '~/multiomics/results/figures/clustering/LNposvsLNneg/Lobular')) {
  dir.create(path = '~/multiomics/results/figures/clustering/LNposvsLNneg/Lobular',recursive = TRUE)
}
```

#### Consensus Clustering Info
```{r}
# ccProt <- read_csv(file = '~/multiomics/results/consensus_clustering/LNposvsLNneg/Lobular/proteome/proteome.k=6.consensusClass.csv',col_names = c('sample_id','CC.Prot'))
# ccPhospho <- read_csv(file = '~/multiomics/results/consensus_clustering/LNposvsLNneg/Lobular/phosphoproteome/phosphoproteome/proteome.k=6.consensusClass.csv',col_names = c('sample_id','CC.Phospho'))
# ccRNA <- read_csv(file = '~/multiomics/results/consensus_clustering/LNposvsLNneg/Lobular/transcriptome/transcriptome/proteome.k=6.consensusClass.csv',col_names = c('sample_id','CC.RNA'))
# 
# ccAll <- full_join(ccProt,ccPhospho) %>% full_join(.,ccRNA)
```

#### Proteome
##### Load Data
```{r}
data <- read_tsv(file = '~/multiomics/results/batchcorrection/fullproteome/cycloess_rollup_genes_batchcorrected.tsv') %>% 
  drop_na
design <- read_tsv(file = '~/multiomics/results/design_files/design_full_lobular.tsv')
```
##### Preprocessing
```{r}
proteinDataFiltered <- medianFiltering(data = data,design = design,sampleCol = 'sample_id',annotation = 'Genes')

proteinDataFiltered <- proteinDataFiltered %>% 
  dplyr::select(Protein,design$sample_id)

proteinDataReduced <- proteinDataFiltered %>% 
  dplyr::select(design$sample_id)
```
##### Optimal Number of clusters
```{r}
factoextra::fviz_nbclust(proteinDataReduced, kmeans, method = "silhouette",k.max = 10,print.summary = TRUE,iter.max=100)

```
##### Plotting
```{r}
calZScore <- function(x) (x-mean(x))/sd(x)

proteindataNorm <- t(apply(proteinDataReduced,1,calZScore))
colnames(proteindataNorm) <- NULL
annotationColumn <- HeatmapAnnotation(Group=anno_simple(x = design$Group.Info,
                                                        col = c('Group5'='#33a02c','Group6'='darkblue'),
                                                        na_col = '#808080',
                                                        gp = gpar(title='Group')),
                                      NHG=anno_simple(x = design$NHG,
                                                      col = c('1'='#4daf4a','2'='#377eb8','3'='#e41a1c'),
                                                      gp = gpar(title='NHS')),
                                      Recurrence=anno_simple(x = design$DRFi_event,
                                                             col = c('1'='black','0'='white'),
                                                             gp = gpar(title='Recurrence')),
                                      Treatment=anno_simple(x = design$TreatGroup,
                                                            col = c('Endo'='#984ea3','ChemoEndo'='#ff7f00','Chemo'='#e41a1c','None'='white'),
                                                            gp = gpar(title='Treatment')),
                                      Batch=anno_simple(x = design$batch,
                                                             col = c('1'='black','2'='white'),
                                                             gp = gpar(title='Batch')),
                                      BCFi=anno_simple(x = design$BCFi_event,
                                                             col = c('1'='black','0'='white'),
                                                             gp = gpar(title='Breast Cancer Recurrence')),
                                      LN=anno_simple(x = design$LN,
                                                     col = c('1'='black','0'='white'),
                                                     gp = gpar(title='Lymph Node Status')),
                                      LNspec=anno_simple(x = design$LN.spec,
                                                         col = c('N0'='white','1to3'='darkgrey','4toX'='black'),
                                                         gp = gpar(title='Lymph Node Status Amplified')))

legendNHG <- Legend(labels = c('1','2','3'),
                      title = 'NHG',
                      border = 'black',
                      legend_gp = gpar(fill=c('1'='#4daf4a','2'='#377eb8','3'='#e41a1c')))
legendRecurrence <- Legend(labels = c('1','0'),
                      title = 'Recurrence',
                      border = 'black',
                      legend_gp = gpar(fill=c('1'='black','0'='white')))
legendTreatment <- Legend(labels = c('Endo','ChemoEndo'),
                      title = 'Treatment',
                      border = 'black',
                      legend_gp = gpar(fill=c('Endo'='#984ea3','ChemoEndo'='#ff7f00','Chemo'='#e41a1c','None'='white')))
legendBatch <- Legend(labels = c('1','2'),
                      title = 'Batch',
                      border = 'black',
                      legend_gp = gpar(fill=c('1'='black','2'='white')))
legendBCFi <- Legend(labels = c('Yes','No'),
                      title = 'Breast Cancer Recurrence',
                      border = 'black',
                      legend_gp = gpar(fill=c('Yes'='black','No'='white')))

legendGroup <- Legend(labels = c('Group5','Group6'),
                      title = 'Group',
                      border = 'black',
                      legend_gp = gpar(fill=c('Group5'='#33a02c','Group6'='darkblue')))
legendLN <- Legend(labels = c('1','0'),
                   title = 'LN Status',
                   border = 'black',
                   legend_gp = gpar(fill=c('1'='black','0'='white')))
legendLNspec <- Legend(labels = c('N0','1to3','4toX'),
                       title = 'LN Status Amplified',
                       border = 'black',
                       legend_gp = gpar(fill=c('N0'='white','1to3'='darkgrey','4toX'='black')))


allLegends <- packLegend(legendGroup,legendNHG,legendRecurrence,legendTreatment,legendBatch,legendBCFi,legendLN,legendLNspec)

proteinHeatmap <- Heatmap(matrix = proteindataNorm,top_annotation = annotationColumn, name = 'Protein intensity',heatmap_legend_param = list(legend_direction = 'horizontal'),column_km = 2,column_km_repeats = 1000)

proteinHeatmapDraw <- grid.grabExpr(draw(proteinHeatmap,annotation_legend_list = allLegends, heatmap_legend_side = 'bottom', annotation_legend_side = 'right', legend_grouping = 'original')) %>% as.ggplot

ggsave2(filename = 'kmeans_proteome.pdf',plot = proteinHeatmapDraw,device = 'pdf',path = '~/multiomics/results/figures/clustering/LNposvsLNneg/Lobular',dpi = 600,width = 12,height = 12,units = 'in')
```

#### Phosphoproteome
##### Load Data
```{r}
data <- read_tsv(file = '~/multiomics/results/batchcorrection/phosphoproteome/cycloess_peptide_batchcorrected.tsv') %>% 
  drop_na
design <- read_tsv(file = '~/multiomics/results/design_files/design_phospho_lobular.tsv')
```
##### Preprocessing
```{r}
phosphoDataFiltered <- medianFiltering(data = data,design = design,sampleCol = 'sample_id',annotation = 'Genes')

phosphoDataFiltered <- phosphoDataFiltered %>% 
  dplyr::select(Protein,design$sample_id)

phosphoDataReduced <- phosphoDataFiltered %>% 
  dplyr::select(design$sample_id)
```
##### Optimal Number of clusters
```{r}
factoextra::fviz_nbclust(phosphoDataReduced, kmeans, method = "silhouette",k.max = 10,print.summary = TRUE,iter.max=100)
```
##### Plotting
```{r}
calZScore <- function(x) (x-mean(x))/sd(x)

phosphoDataNorm <- t(apply(phosphoDataReduced,1,calZScore))
colnames(phosphoDataNorm) <- NULL
annotationColumn <- HeatmapAnnotation(Group=anno_simple(x = design$Group.Info,
                                                        col = c('Group5'='#33a02c','Group6'='darkblue'),
                                                        na_col = '#808080',
                                                        gp = gpar(title='Group')),
                                      NHG=anno_simple(x = design$NHG,
                                                      col = c('1'='#4daf4a','2'='#377eb8','3'='#e41a1c'),
                                                      gp = gpar(title='NHS')),
                                      Recurrence=anno_simple(x = design$DRFi_event,
                                                             col = c('1'='black','0'='white'),
                                                             gp = gpar(title='Recurrence')),
                                      Treatment=anno_simple(x = design$TreatGroup,
                                                            col = c('Endo'='#984ea3','ChemoEndo'='#ff7f00','Chemo'='#e41a1c','None'='white'),
                                                            gp = gpar(title='Treatment')),
                                      Batch=anno_simple(x = design$batch,
                                                             col = c('1'='black','2'='white'),
                                                             gp = gpar(title='Batch')),
                                      BCFi=anno_simple(x = design$BCFi_event,
                                                             col = c('1'='black','0'='white'),
                                                             gp = gpar(title='Breast Cancer Recurrence')),
                                      LN=anno_simple(x = design$LN,
                                                     col = c('1'='black','0'='white'),
                                                     gp = gpar(title='Lymph Node Status')),
                                      LNspec=anno_simple(x = design$LN.spec,
                                                         col = c('N0'='white','1to3'='darkgrey','4toX'='black'),
                                                         gp = gpar(title='Lymph Node Status Amplified')))

legendNHG <- Legend(labels = c('1','2','3'),
                      title = 'NHG',
                      border = 'black',
                      legend_gp = gpar(fill=c('1'='#4daf4a','2'='#377eb8','3'='#e41a1c')))
legendRecurrence <- Legend(labels = c('1','0'),
                      title = 'Recurrence',
                      border = 'black',
                      legend_gp = gpar(fill=c('1'='black','0'='white')))
legendTreatment <- Legend(labels = c('Endo','ChemoEndo'),
                      title = 'Treatment',
                      border = 'black',
                      legend_gp = gpar(fill=c('Endo'='#984ea3','ChemoEndo'='#ff7f00','Chemo'='#e41a1c','None'='white')))
legendBatch <- Legend(labels = c('1','2'),
                      title = 'Batch',
                      border = 'black',
                      legend_gp = gpar(fill=c('1'='black','2'='white')))
legendBCFi <- Legend(labels = c('Yes','No'),
                      title = 'Breast Cancer Recurrence',
                      border = 'black',
                      legend_gp = gpar(fill=c('Yes'='black','No'='white')))

legendGroup <- Legend(labels = c('Group5','Group6'),
                      title = 'Group',
                      border = 'black',
                      legend_gp = gpar(fill=c('Group5'='#33a02c','Group6'='darkblue')))
legendLN <- Legend(labels = c('1','0'),
                   title = 'LN Status',
                   border = 'black',
                   legend_gp = gpar(fill=c('1'='black','0'='white')))
legendLNspec <- Legend(labels = c('N0','1to3','4toX'),
                       title = 'LN Status Amplified',
                       border = 'black',
                       legend_gp = gpar(fill=c('N0'='white','1to3'='darkgrey','4toX'='black')))


allLegends <- packLegend(legendGroup,legendNHG,legendRecurrence,legendTreatment,legendBatch,legendBCFi,legendLN,legendLNspec)

phosphoHeatmap <- Heatmap(matrix = phosphoDataNorm,top_annotation = annotationColumn, name = 'Protein intensity',heatmap_legend_param = list(legend_direction = 'horizontal'),column_km = 2,column_km_repeats = 1000)

phosphoHeatmapDraw <- grid.grabExpr(draw(phosphoHeatmap,annotation_legend_list = allLegends, heatmap_legend_side = 'bottom', annotation_legend_side = 'right', legend_grouping = 'original')) %>% as.ggplot

ggsave2(filename = 'kmeans_phospho.pdf',plot = phosphoHeatmapDraw,device = 'pdf',path = '~/multiomics/results/figures/clustering/LNposvsLNneg/Lobular',dpi = 600,width = 12,height = 12,units = 'in')
```

#### Transcriptome
##### Load Data
```{r}
data <- read_tsv(file = '~/multiomics/data/transcriptomics/genematrix_filtered_adjusted_centered.tsv') %>% 
  drop_na
design <- read_tsv(file = '~/multiomics/results/design_files/design_RNA_lobular.tsv')
```
##### Preprocessing
```{r}
rnaDataFiltered <- medianFiltering(data = data,design = design,sampleCol = 'sample_id',annotation = 'Gene.ID')

rnaDataFiltered <- rnaDataFiltered %>% 
  dplyr::select(Gene.ID,design$sample_id)

rnaDataReduced <- rnaDataFiltered %>% 
  dplyr::select(design$sample_id)
```
##### Optimal Number of clusters
```{r}
factoextra::fviz_nbclust(rnaDataReduced, kmeans, method = "silhouette",k.max = 10,print.summary = TRUE,iter.max=100)
```
##### Plotting
```{r}
calZScore <- function(x) (x-mean(x))/sd(x)

rnaDataNorm <- t(apply(rnaDataReduced,1,calZScore))
colnames(rnaDataNorm) <- NULL
annotationColumn <- HeatmapAnnotation(Group=anno_simple(x = design$Group.Info,
                                                        col = c('Group5'='#33a02c','Group6'='darkblue'),
                                                        na_col = '#808080',
                                                        gp = gpar(title='Group')),
                                      NHG=anno_simple(x = design$NHG,
                                                      col = c('1'='#4daf4a','2'='#377eb8','3'='#e41a1c'),
                                                      gp = gpar(title='NHS')),
                                      Recurrence=anno_simple(x = design$DRFi_event,
                                                             col = c('1'='black','0'='white'),
                                                             gp = gpar(title='Recurrence')),
                                      Treatment=anno_simple(x = design$TreatGroup,
                                                            col = c('Endo'='#984ea3','ChemoEndo'='#ff7f00','Chemo'='#e41a1c','None'='white'),
                                                            gp = gpar(title='Treatment')),
                                      Batch=anno_simple(x = design$batch,
                                                             col = c('1'='black','2'='white'),
                                                             gp = gpar(title='Batch')),
                                      BCFi=anno_simple(x = design$BCFi_event,
                                                             col = c('1'='black','0'='white'),
                                                             gp = gpar(title='Breast Cancer Recurrence')),
                                      LN=anno_simple(x = design$LN,
                                                     col = c('1'='black','0'='white'),
                                                     gp = gpar(title='Lymph Node Status')),
                                      LNspec=anno_simple(x = design$LN.spec,
                                                         col = c('N0'='white','1to3'='darkgrey','4toX'='black'),
                                                         gp = gpar(title='Lymph Node Status Amplified')))

legendNHG <- Legend(labels = c('1','2','3'),
                      title = 'NHG',
                      border = 'black',
                      legend_gp = gpar(fill=c('1'='#4daf4a','2'='#377eb8','3'='#e41a1c')))
legendRecurrence <- Legend(labels = c('1','0'),
                      title = 'Recurrence',
                      border = 'black',
                      legend_gp = gpar(fill=c('1'='black','0'='white')))
legendTreatment <- Legend(labels = c('Endo','ChemoEndo'),
                      title = 'Treatment',
                      border = 'black',
                      legend_gp = gpar(fill=c('Endo'='#984ea3','ChemoEndo'='#ff7f00','Chemo'='#e41a1c','None'='white')))
legendBatch <- Legend(labels = c('1','2'),
                      title = 'Batch',
                      border = 'black',
                      legend_gp = gpar(fill=c('1'='black','2'='white')))
legendBCFi <- Legend(labels = c('Yes','No'),
                      title = 'Breast Cancer Recurrence',
                      border = 'black',
                      legend_gp = gpar(fill=c('Yes'='black','No'='white')))

legendGroup <- Legend(labels = c('Group5','Group6'),
                      title = 'Group',
                      border = 'black',
                      legend_gp = gpar(fill=c('Group5'='#33a02c','Group6'='darkblue')))
legendLN <- Legend(labels = c('1','0'),
                   title = 'LN Status',
                   border = 'black',
                   legend_gp = gpar(fill=c('1'='black','0'='white')))
legendLNspec <- Legend(labels = c('N0','1to3','4toX'),
                       title = 'LN Status Amplified',
                       border = 'black',
                       legend_gp = gpar(fill=c('N0'='white','1to3'='darkgrey','4toX'='black')))


allLegends <- packLegend(legendGroup,legendNHG,legendRecurrence,legendTreatment,legendBatch,legendBCFi,legendLN,legendLNspec)

rnaHeatmap <- Heatmap(matrix = rnaDataNorm,top_annotation = annotationColumn, name = 'Gene Expression',heatmap_legend_param = list(legend_direction = 'horizontal'),column_km = 2,column_km_repeats = 1000)

rnaHeatmapDraw <- grid.grabExpr(draw(rnaHeatmap,annotation_legend_list = allLegends, heatmap_legend_side = 'bottom', annotation_legend_side = 'right', legend_grouping = 'original')) %>% as.ggplot

ggsave2(filename = 'kmeans_transcriptome.pdf',plot = rnaHeatmapDraw,device = 'pdf',path = '~/multiomics/results/figures/clustering/LNposvsLNneg/Lobular',dpi = 600,width = 12,height = 12,units = 'in')
```

## Group1 vs Group2
```{r}
if(!dir.exists(paths = '~/multiomics/results/figures/clustering/Group1vsGroup2')) {
  dir.create(path = '~/multiomics/results/figures/clustering/Group1vsGroup2',recursive = TRUE)
}
```

### Consensus Clustering Info
```{r}
# ccProt <- read_csv(file = '~/multiomics/results/consensus_clustering/Group1vsGroup2/proteome/proteome.k=6.consensusClass.csv',col_names = c('sample_id','CC.Prot'))
# ccPhospho <- read_csv(file = '~/multiomics/results/consensus_clustering/Group1vsGroup2/phosphoproteome/phosphoproteome/proteome.k=6.consensusClass.csv',col_names = c('sample_id','CC.Phospho'))
# ccRNA <- read_csv(file = '~/multiomics/results/consensus_clustering/Group1vsGroup2/transcriptome/transcriptome/proteome.k=6.consensusClass.csv',col_names = c('sample_id','CC.RNA'))
# 
# ccAll <- full_join(ccProt,ccPhospho) %>% full_join(.,ccRNA)
```

### Proteome
#### Load Data
```{r}
data <- read_tsv(file = '~/multiomics/results/batchcorrection/fullproteome/cycloess_rollup_genes_batchcorrected.tsv') %>% 
  drop_na
design <- read_tsv(file = '~/multiomics/results/design_files/design_full_g1g2.tsv')
```
#### Preprocessing
```{r}
proteinDataFiltered <- medianFiltering(data = data,design = design,sampleCol = 'sample_id',annotation = 'Genes')

proteinDataFiltered <- proteinDataFiltered %>% 
  dplyr::select(Protein,design$sample_id)

proteinDataReduced <- proteinDataFiltered %>% 
  dplyr::select(design$sample_id)
```
#### Optimal Number of clusters
```{r}
factoextra::fviz_nbclust(proteinDataReduced, kmeans, method = "silhouette",k.max = 10,print.summary = TRUE,iter.max=100)

```
#### Plotting
```{r}
calZScore <- function(x) (x-mean(x))/sd(x)

proteindataNorm <- t(apply(proteinDataReduced,1,calZScore))
colnames(proteindataNorm) <- NULL
annotationColumn <- HeatmapAnnotation(Group=anno_simple(x = design$Group.Info,
                                                        col = c('Group1'='#e31a1c','Group2'='#fb9a99'),
                                                        na_col = '#808080',
                                                        gp = gpar(title='Group')),
                                      NHG=anno_simple(x = design$NHG,
                                                      col = c('1'='#4daf4a','2'='#377eb8','3'='#e41a1c'),
                                                      gp = gpar(title='NHS')),
                                      Recurrence=anno_simple(x = design$DRFi_event,
                                                             col = c('1'='black','0'='white'),
                                                             gp = gpar(title='Recurrence')),
                                      Treatment=anno_simple(x = design$TreatGroup,
                                                            col = c('Endo'='#984ea3','ChemoEndo'='#ff7f00','Chemo'='#e41a1c','None'='white'),
                                                            gp = gpar(title='Treatment')),
                                      Batch=anno_simple(x = design$batch,
                                                             col = c('1'='black','2'='white'),
                                                             gp = gpar(title='Batch')),
                                      BCFi=anno_simple(x = design$BCFi_event,
                                                             col = c('1'='black','0'='white'),
                                                             gp = gpar(title='Breast Cancer Recurrence')))

legendNHG <- Legend(labels = c('1','2','3'),
                      title = 'NHG',
                      border = 'black',
                      legend_gp = gpar(fill=c('1'='#4daf4a','2'='#377eb8','3'='#e41a1c')))
legendRecurrence <- Legend(labels = c('1','0'),
                      title = 'Recurrence',
                      border = 'black',
                      legend_gp = gpar(fill=c('1'='black','0'='white')))
legendTreatment <- Legend(labels = c('Endo','ChemoEndo'),
                      title = 'Treatment',
                      border = 'black',
                      legend_gp = gpar(fill=c('Endo'='#984ea3','ChemoEndo'='#ff7f00','Chemo'='#e41a1c','None'='white')))
legendBatch <- Legend(labels = c('1','2'),
                      title = 'Batch',
                      border = 'black',
                      legend_gp = gpar(fill=c('1'='black','2'='white')))
legendBCFi <- Legend(labels = c('Yes','No'),
                      title = 'Breast Cancer Recurrence',
                      border = 'black',
                      legend_gp = gpar(fill=c('Yes'='black','No'='white')))

legendGroup <- Legend(labels = c('Group1','Group2'),
                      title = 'Group',
                      border = 'black',
                      legend_gp = gpar(fill=c('Group1'='#e31a1c','Group2'='#fb9a99')))

allLegends <- packLegend(legendGroup,legendNHG,legendRecurrence,legendTreatment,legendBatch,legendBCFi)

proteinHeatmap <- Heatmap(matrix = proteindataNorm,top_annotation = annotationColumn, name = 'Protein intensity',heatmap_legend_param = list(legend_direction = 'horizontal'),column_km = 2,column_km_repeats = 1000)

proteinHeatmapDraw <- grid.grabExpr(draw(proteinHeatmap,annotation_legend_list = allLegends, heatmap_legend_side = 'bottom', annotation_legend_side = 'right', legend_grouping = 'original')) %>% as.ggplot

ggsave2(filename = 'kmeans_proteome.pdf',plot = proteinHeatmapDraw,device = 'pdf',path = '~/multiomics/results/figures/clustering/Group1vsGroup2',dpi = 600,width = 12,height = 12,units = 'in')
```

### Phosphoproteome
#### Load Data
```{r}
data <- read_tsv(file = '~/multiomics/results/batchcorrection/phosphoproteome/cycloess_peptide_batchcorrected.tsv') %>% 
  drop_na
design <- read_tsv(file = '~/multiomics/results/design_files/design_phospho_g1g2.tsv')
```
#### Preprocessing
```{r}
phosphoDataFiltered <- medianFiltering(data = data,design = design,sampleCol = 'sample_id',annotation = 'Genes')

phosphoDataFiltered <- phosphoDataFiltered %>% 
  dplyr::select(Protein,design$sample_id)

phosphoDataReduced <- phosphoDataFiltered %>% 
  dplyr::select(design$sample_id)
```
#### Optimal Number of clusters
```{r}
factoextra::fviz_nbclust(phosphoDataReduced, kmeans, method = "silhouette",k.max = 10,print.summary = TRUE,iter.max=100)
```
#### Plotting
```{r}
calZScore <- function(x) (x-mean(x))/sd(x)

phosphoDataNorm <- t(apply(phosphoDataReduced,1,calZScore))
colnames(phosphoDataNorm) <- NULL
annotationColumn <- HeatmapAnnotation(Group=anno_simple(x = design$Group.Info,
                                                        col = c('Group1'='#e31a1c','Group2'='#fb9a99'),
                                                        na_col = '#808080',
                                                        gp = gpar(title='Group')),
                                      NHG=anno_simple(x = design$NHG,
                                                      col = c('1'='#4daf4a','2'='#377eb8','3'='#e41a1c'),
                                                      gp = gpar(title='NHS')),
                                      Recurrence=anno_simple(x = design$DRFi_event,
                                                             col = c('1'='black','0'='white'),
                                                             gp = gpar(title='Recurrence')),
                                      Treatment=anno_simple(x = design$TreatGroup,
                                                            col = c('Endo'='#984ea3','ChemoEndo'='#ff7f00','Chemo'='#e41a1c','None'='white'),
                                                            gp = gpar(title='Treatment')),
                                      Batch=anno_simple(x = design$batch,
                                                             col = c('1'='black','2'='white'),
                                                             gp = gpar(title='Batch')),
                                      BCFi=anno_simple(x = design$BCFi_event,
                                                             col = c('1'='black','0'='white'),
                                                             gp = gpar(title='Breast Cancer Recurrence')))

legendNHG <- Legend(labels = c('1','2','3'),
                      title = 'NHG',
                      border = 'black',
                      legend_gp = gpar(fill=c('1'='#4daf4a','2'='#377eb8','3'='#e41a1c')))
legendRecurrence <- Legend(labels = c('1','0'),
                      title = 'Recurrence',
                      border = 'black',
                      legend_gp = gpar(fill=c('1'='black','0'='white')))
legendTreatment <- Legend(labels = c('Endo','ChemoEndo'),
                      title = 'Treatment',
                      border = 'black',
                      legend_gp = gpar(fill=c('Endo'='#984ea3','ChemoEndo'='#ff7f00','Chemo'='#e41a1c','None'='white')))
legendBatch <- Legend(labels = c('1','2'),
                      title = 'Batch',
                      border = 'black',
                      legend_gp = gpar(fill=c('1'='black','2'='white')))
legendBCFi <- Legend(labels = c('Yes','No'),
                      title = 'Breast Cancer Recurrence',
                      border = 'black',
                      legend_gp = gpar(fill=c('Yes'='black','No'='white')))

legendGroup <- Legend(labels = c('Group1','Group2'),
                      title = 'Group',
                      border = 'black',
                      legend_gp = gpar(fill=c('Group1'='#e31a1c','Group2'='#fb9a99')))

allLegends <- packLegend(legendGroup,legendNHG,legendRecurrence,legendTreatment,legendBatch,legendBCFi)

phosphoHeatmap <- Heatmap(matrix = phosphoDataNorm,top_annotation = annotationColumn, name = 'Protein intensity',heatmap_legend_param = list(legend_direction = 'horizontal'),column_km = 2,column_km_repeats = 1000)

phosphoHeatmapDraw <- grid.grabExpr(draw(phosphoHeatmap,annotation_legend_list = allLegends, heatmap_legend_side = 'bottom', annotation_legend_side = 'right', legend_grouping = 'original')) %>% as.ggplot

ggsave2(filename = 'kmeans_phospho.pdf',plot = phosphoHeatmapDraw,device = 'pdf',path = '~/multiomics/results/figures/clustering/Group1vsGroup2',dpi = 600,width = 12,height = 12,units = 'in')
```

### Transcriptome
#### Load Data
```{r}
data <- read_tsv(file = '~/multiomics/data/transcriptomics/genematrix_filtered_adjusted_centered.tsv') %>% 
  drop_na
design <- read_tsv(file = '~/multiomics/results/design_files/design_RNA_g1g2.tsv')
```
#### Preprocessing
```{r}
rnaDataFiltered <- medianFiltering(data = data,design = design,sampleCol = 'sample_id',annotation = 'Gene.ID')

rnaDataFiltered <- rnaDataFiltered %>% 
  dplyr::select(Gene.ID,design$sample_id)

rnaDataReduced <- rnaDataFiltered %>% 
  dplyr::select(design$sample_id)
```
#### Optimal Number of clusters
```{r}
factoextra::fviz_nbclust(rnaDataReduced, kmeans, method = "silhouette",k.max = 10,print.summary = TRUE,iter.max=100)
```
#### Plotting
```{r}
calZScore <- function(x) (x-mean(x))/sd(x)

rnaDataNorm <- t(apply(rnaDataReduced,1,calZScore))
colnames(rnaDataNorm) <- NULL
annotationColumn <- HeatmapAnnotation(Group=anno_simple(x = design$Group.Info,
                                                        col = c('Group1'='#e31a1c','Group2'='#fb9a99'),
                                                        na_col = '#808080',
                                                        gp = gpar(title='Group')),
                                      NHG=anno_simple(x = design$NHG,
                                                      col = c('1'='#4daf4a','2'='#377eb8','3'='#e41a1c'),
                                                      gp = gpar(title='NHS')),
                                      Recurrence=anno_simple(x = design$DRFi_event,
                                                             col = c('1'='black','0'='white'),
                                                             gp = gpar(title='Recurrence')),
                                      Treatment=anno_simple(x = design$TreatGroup,
                                                            col = c('Endo'='#984ea3','ChemoEndo'='#ff7f00','Chemo'='#e41a1c','None'='white'),
                                                            gp = gpar(title='Treatment')),
                                      Batch=anno_simple(x = design$batch,
                                                             col = c('1'='black','2'='white'),
                                                             gp = gpar(title='Batch')),
                                      BCFi=anno_simple(x = design$BCFi_event,
                                                             col = c('1'='black','0'='white'),
                                                             gp = gpar(title='Breast Cancer Recurrence')))

legendNHG <- Legend(labels = c('1','2','3'),
                      title = 'NHG',
                      border = 'black',
                      legend_gp = gpar(fill=c('1'='#4daf4a','2'='#377eb8','3'='#e41a1c')))
legendRecurrence <- Legend(labels = c('1','0'),
                      title = 'Recurrence',
                      border = 'black',
                      legend_gp = gpar(fill=c('1'='black','0'='white')))
legendTreatment <- Legend(labels = c('Endo','ChemoEndo'),
                      title = 'Treatment',
                      border = 'black',
                      legend_gp = gpar(fill=c('Endo'='#984ea3','ChemoEndo'='#ff7f00','Chemo'='#e41a1c','None'='white')))
legendBatch <- Legend(labels = c('1','2'),
                      title = 'Batch',
                      border = 'black',
                      legend_gp = gpar(fill=c('1'='black','2'='white')))
legendBCFi <- Legend(labels = c('Yes','No'),
                      title = 'Breast Cancer Recurrence',
                      border = 'black',
                      legend_gp = gpar(fill=c('Yes'='black','No'='white')))

legendGroup <- Legend(labels = c('Group1','Group2'),
                      title = 'Group',
                      border = 'black',
                      legend_gp = gpar(fill=c('Group1'='#e31a1c','Group2'='#fb9a99')))


allLegends <- packLegend(legendGroup,legendNHG,legendRecurrence,legendTreatment,legendBatch,legendBCFi)

rnaHeatmap <- Heatmap(matrix = rnaDataNorm,top_annotation = annotationColumn, name = 'Gene Expression',heatmap_legend_param = list(legend_direction = 'horizontal'),column_km = 2,column_km_repeats = 1000)

rnaHeatmapDraw <- grid.grabExpr(draw(rnaHeatmap,annotation_legend_list = allLegends, heatmap_legend_side = 'bottom', annotation_legend_side = 'right', legend_grouping = 'original')) %>% as.ggplot

ggsave2(filename = 'kmeans_transcriptome.pdf',plot = rnaHeatmapDraw,device = 'pdf',path = '~/multiomics/results/figures/clustering/Group1vsGroup2',dpi = 600,width = 12,height = 12,units = 'in')
```

## Group3 vs Group4
```{r}
if(!dir.exists(paths = '~/multiomics/results/figures/clustering/Group3vsGroup4')) {
  dir.create(path = '~/multiomics/results/figures/clustering/Group3vsGroup4',recursive = TRUE)
}
```

### Consensus Clustering Info
```{r}
# ccProt <- read_csv(file = '~/multiomics/results/consensus_clustering/Group3vsGroup4/proteome/proteome.k=6.consensusClass.csv',col_names = c('sample_id','CC.Prot'))
# ccPhospho <- read_csv(file = '~/multiomics/results/consensus_clustering/Group3vsGroup4/phosphoproteome/phosphoproteome/proteome.k=6.consensusClass.csv',col_names = c('sample_id','CC.Phospho'))
# ccRNA <- read_csv(file = '~/multiomics/results/consensus_clustering/Group3vsGroup4/transcriptome/transcriptome/proteome.k=6.consensusClass.csv',col_names = c('sample_id','CC.RNA'))
# 
# ccAll <- full_join(ccProt,ccPhospho) %>% full_join(.,ccRNA)
```

### Proteome
#### Load Data
```{r}
data <- read_tsv(file = '~/multiomics/results/batchcorrection/fullproteome/cycloess_rollup_genes_batchcorrected.tsv') %>% 
  drop_na
design <- read_tsv(file = '~/multiomics/results/design_files/design_full_g3g4.tsv')
```
#### Preprocessing
```{r}
proteinDataFiltered <- medianFiltering(data = data,design = design,sampleCol = 'sample_id',annotation = 'Genes')

proteinDataFiltered <- proteinDataFiltered %>% 
  dplyr::select(Protein,design$sample_id)

proteinDataReduced <- proteinDataFiltered %>% 
  dplyr::select(design$sample_id)
```
#### Optimal Number of clusters
```{r}
factoextra::fviz_nbclust(proteinDataReduced, kmeans, method = "silhouette",k.max = 10,print.summary = TRUE,iter.max=100)

```
#### Plotting
```{r}
calZScore <- function(x) (x-mean(x))/sd(x)

proteindataNorm <- t(apply(proteinDataReduced,1,calZScore))
colnames(proteindataNorm) <- NULL
annotationColumn <- HeatmapAnnotation(Group=anno_simple(x = design$Group.Info,
                                                        col = c('Group3'='#e31a1c','Group4'='#fb9a99'),
                                                        na_col = '#808080',
                                                        gp = gpar(title='Group')),
                                      NHG=anno_simple(x = design$NHG,
                                                      col = c('1'='#4daf4a','2'='#377eb8','3'='#e41a1c'),
                                                      gp = gpar(title='NHS')),
                                      Recurrence=anno_simple(x = design$DRFi_event,
                                                             col = c('1'='black','0'='white'),
                                                             gp = gpar(title='Recurrence')),
                                      Treatment=anno_simple(x = design$TreatGroup,
                                                            col = c('Endo'='#984ea3','ChemoEndo'='#ff7f00','Chemo'='#e41a1c','None'='white'),
                                                            gp = gpar(title='Treatment')),
                                      Batch=anno_simple(x = design$batch,
                                                             col = c('1'='black','2'='white'),
                                                             gp = gpar(title='Batch')),
                                      BCFi=anno_simple(x = design$BCFi_event,
                                                             col = c('1'='black','0'='white'),
                                                             gp = gpar(title='Breast Cancer Recurrence')))

legendNHG <- Legend(labels = c('1','2','3'),
                      title = 'NHG',
                      border = 'black',
                      legend_gp = gpar(fill=c('1'='#4daf4a','2'='#377eb8','3'='#e41a1c')))
legendRecurrence <- Legend(labels = c('1','0'),
                      title = 'Recurrence',
                      border = 'black',
                      legend_gp = gpar(fill=c('1'='black','0'='white')))
legendTreatment <- Legend(labels = c('Endo','ChemoEndo'),
                      title = 'Treatment',
                      border = 'black',
                      legend_gp = gpar(fill=c('Endo'='#984ea3','ChemoEndo'='#ff7f00','Chemo'='#e41a1c','None'='white')))
legendBatch <- Legend(labels = c('1','2'),
                      title = 'Batch',
                      border = 'black',
                      legend_gp = gpar(fill=c('1'='black','2'='white')))
legendBCFi <- Legend(labels = c('Yes','No'),
                      title = 'Breast Cancer Recurrence',
                      border = 'black',
                      legend_gp = gpar(fill=c('Yes'='black','No'='white')))

legendGroup <- Legend(labels = c('Group3','Group4'),
                      title = 'Group',
                      border = 'black',
                      legend_gp = gpar(fill=c('Group3'='#e31a1c','Group4'='#fb9a99')))

allLegends <- packLegend(legendGroup,legendNHG,legendRecurrence,legendTreatment,legendBatch,legendBCFi)

proteinHeatmap <- Heatmap(matrix = proteindataNorm,top_annotation = annotationColumn, name = 'Protein intensity',heatmap_legend_param = list(legend_direction = 'horizontal'),column_km = 2,column_km_repeats = 1000)

proteinHeatmapDraw <- grid.grabExpr(draw(proteinHeatmap,annotation_legend_list = allLegends, heatmap_legend_side = 'bottom', annotation_legend_side = 'right', legend_grouping = 'original')) %>% as.ggplot

ggsave2(filename = 'kmeans_proteome.pdf',plot = proteinHeatmapDraw,device = 'pdf',path = '~/multiomics/results/figures/clustering/Group3vsGroup4',dpi = 600,width = 12,height = 12,units = 'in')
```

### Phosphoproteome
#### Load Data
```{r}
data <- read_tsv(file = '~/multiomics/results/batchcorrection/phosphoproteome/cycloess_peptide_batchcorrected.tsv') %>% 
  drop_na
design <- read_tsv(file = '~/multiomics/results/design_files/design_phospho_g3g4.tsv')
```
#### Preprocessing
```{r}
phosphoDataFiltered <- medianFiltering(data = data,design = design,sampleCol = 'sample_id',annotation = 'Genes')

phosphoDataFiltered <- phosphoDataFiltered %>% 
  dplyr::select(Protein,design$sample_id)

phosphoDataReduced <- phosphoDataFiltered %>% 
  dplyr::select(design$sample_id)
```
#### Optimal Number of clusters
```{r}
factoextra::fviz_nbclust(phosphoDataReduced, kmeans, method = "silhouette",k.max = 10,print.summary = TRUE,iter.max=100)
```
#### Plotting
```{r}
calZScore <- function(x) (x-mean(x))/sd(x)

phosphoDataNorm <- t(apply(phosphoDataReduced,1,calZScore))
colnames(phosphoDataNorm) <- NULL
annotationColumn <- HeatmapAnnotation(Group=anno_simple(x = design$Group.Info,
                                                        col = c('Group3'='#e31a1c','Group4'='#fb9a99'),
                                                        na_col = '#808080',
                                                        gp = gpar(title='Group')),
                                      NHG=anno_simple(x = design$NHG,
                                                      col = c('1'='#4daf4a','2'='#377eb8','3'='#e41a1c'),
                                                      gp = gpar(title='NHS')),
                                      Recurrence=anno_simple(x = design$DRFi_event,
                                                             col = c('1'='black','0'='white'),
                                                             gp = gpar(title='Recurrence')),
                                      Treatment=anno_simple(x = design$TreatGroup,
                                                            col = c('Endo'='#984ea3','ChemoEndo'='#ff7f00','Chemo'='#e41a1c','None'='white'),
                                                            gp = gpar(title='Treatment')),
                                      Batch=anno_simple(x = design$batch,
                                                             col = c('1'='black','2'='white'),
                                                             gp = gpar(title='Batch')),
                                      BCFi=anno_simple(x = design$BCFi_event,
                                                             col = c('1'='black','0'='white'),
                                                             gp = gpar(title='Breast Cancer Recurrence')))

legendNHG <- Legend(labels = c('1','2','3'),
                      title = 'NHG',
                      border = 'black',
                      legend_gp = gpar(fill=c('1'='#4daf4a','2'='#377eb8','3'='#e41a1c')))
legendRecurrence <- Legend(labels = c('1','0'),
                      title = 'Recurrence',
                      border = 'black',
                      legend_gp = gpar(fill=c('1'='black','0'='white')))
legendTreatment <- Legend(labels = c('Endo','ChemoEndo'),
                      title = 'Treatment',
                      border = 'black',
                      legend_gp = gpar(fill=c('Endo'='#984ea3','ChemoEndo'='#ff7f00','Chemo'='#e41a1c','None'='white')))
legendBatch <- Legend(labels = c('1','2'),
                      title = 'Batch',
                      border = 'black',
                      legend_gp = gpar(fill=c('1'='black','2'='white')))
legendBCFi <- Legend(labels = c('Yes','No'),
                      title = 'Breast Cancer Recurrence',
                      border = 'black',
                      legend_gp = gpar(fill=c('Yes'='black','No'='white')))

legendGroup <- Legend(labels = c('Group3','Group4'),
                      title = 'Group',
                      border = 'black',
                      legend_gp = gpar(fill=c('Group3'='#e31a1c','Group4'='#fb9a99')))

allLegends <- packLegend(legendGroup,legendNHG,legendRecurrence,legendTreatment,legendBatch,legendBCFi)

phosphoHeatmap <- Heatmap(matrix = phosphoDataNorm,top_annotation = annotationColumn, name = 'Protein intensity',heatmap_legend_param = list(legend_direction = 'horizontal'),column_km = 2,column_km_repeats = 1000)

phosphoHeatmapDraw <- grid.grabExpr(draw(phosphoHeatmap,annotation_legend_list = allLegends, heatmap_legend_side = 'bottom', annotation_legend_side = 'right', legend_grouping = 'original')) %>% as.ggplot

ggsave2(filename = 'kmeans_phospho.pdf',plot = phosphoHeatmapDraw,device = 'pdf',path = '~/multiomics/results/figures/clustering/Group3vsGroup4',dpi = 600,width = 12,height = 12,units = 'in')
```

### Transcriptome
#### Load Data
```{r}
data <- read_tsv(file = '~/multiomics/data/transcriptomics/genematrix_filtered_adjusted_centered.tsv') %>% 
  drop_na
design <- read_tsv(file = '~/multiomics/results/design_files/design_RNA_g3g4.tsv')
```
#### Preprocessing
```{r}
rnaDataFiltered <- medianFiltering(data = data,design = design,sampleCol = 'sample_id',annotation = 'Gene.ID')

rnaDataFiltered <- rnaDataFiltered %>% 
  dplyr::select(Gene.ID,design$sample_id)

rnaDataReduced <- rnaDataFiltered %>% 
  dplyr::select(design$sample_id)
```
#### Optimal Number of clusters
```{r}
factoextra::fviz_nbclust(rnaDataReduced, kmeans, method = "silhouette",k.max = 10,print.summary = TRUE,iter.max=100)
```
#### Plotting
```{r}
calZScore <- function(x) (x-mean(x))/sd(x)

rnaDataNorm <- t(apply(rnaDataReduced,1,calZScore))
colnames(rnaDataNorm) <- NULL
annotationColumn <- HeatmapAnnotation(Group=anno_simple(x = design$Group.Info,
                                                        col = c('Group3'='#e31a1c','Group4'='#fb9a99'),
                                                        na_col = '#808080',
                                                        gp = gpar(title='Group')),
                                      NHG=anno_simple(x = design$NHG,
                                                      col = c('1'='#4daf4a','2'='#377eb8','3'='#e41a1c'),
                                                      gp = gpar(title='NHS')),
                                      Recurrence=anno_simple(x = design$DRFi_event,
                                                             col = c('1'='black','0'='white'),
                                                             gp = gpar(title='Recurrence')),
                                      Treatment=anno_simple(x = design$TreatGroup,
                                                            col = c('Endo'='#984ea3','ChemoEndo'='#ff7f00','Chemo'='#e41a1c','None'='white'),
                                                            gp = gpar(title='Treatment')),
                                      Batch=anno_simple(x = design$batch,
                                                             col = c('1'='black','2'='white'),
                                                             gp = gpar(title='Batch')),
                                      BCFi=anno_simple(x = design$BCFi_event,
                                                             col = c('1'='black','0'='white'),
                                                             gp = gpar(title='Breast Cancer Recurrence')))

legendNHG <- Legend(labels = c('1','2','3'),
                      title = 'NHG',
                      border = 'black',
                      legend_gp = gpar(fill=c('1'='#4daf4a','2'='#377eb8','3'='#e41a1c')))
legendRecurrence <- Legend(labels = c('1','0'),
                      title = 'Recurrence',
                      border = 'black',
                      legend_gp = gpar(fill=c('1'='black','0'='white')))
legendTreatment <- Legend(labels = c('Endo','ChemoEndo'),
                      title = 'Treatment',
                      border = 'black',
                      legend_gp = gpar(fill=c('Endo'='#984ea3','ChemoEndo'='#ff7f00','Chemo'='#e41a1c','None'='white')))
legendBatch <- Legend(labels = c('1','2'),
                      title = 'Batch',
                      border = 'black',
                      legend_gp = gpar(fill=c('1'='black','2'='white')))
legendBCFi <- Legend(labels = c('Yes','No'),
                      title = 'Breast Cancer Recurrence',
                      border = 'black',
                      legend_gp = gpar(fill=c('Yes'='black','No'='white')))

legendGroup <- Legend(labels = c('Group3','Group4'),
                      title = 'Group',
                      border = 'black',
                      legend_gp = gpar(fill=c('Group3'='#e31a1c','Group4'='#fb9a99')))


allLegends <- packLegend(legendGroup,legendNHG,legendRecurrence,legendTreatment,legendBatch,legendBCFi)

rnaHeatmap <- Heatmap(matrix = rnaDataNorm,top_annotation = annotationColumn, name = 'Gene Expression',heatmap_legend_param = list(legend_direction = 'horizontal'),column_km = 2,column_km_repeats = 1000)

rnaHeatmapDraw <- grid.grabExpr(draw(rnaHeatmap,annotation_legend_list = allLegends, heatmap_legend_side = 'bottom', annotation_legend_side = 'right', legend_grouping = 'original')) %>% as.ggplot

ggsave2(filename = 'kmeans_transcriptome.pdf',plot = rnaHeatmapDraw,device = 'pdf',path = '~/multiomics/results/figures/clustering/Group3vsGroup4',dpi = 600,width = 12,height = 12,units = 'in')
```