---
title: "Survival Analysis"
author: "Sergio Mosquim Junior"
format:
  html:
    toc: true
    code-fold: true
    embed-resources: true
    toc-location: left
    smooth-scroll: true
    message: false
engine: knitr
params:
  comparison: 'DuctalvsLobular_noG2'
  time: 'RFi_days'
  event: 'RFi_event'
  lambda: 'lambda_min'
  outcome: 'LN'
editor_options: 
  chunk_output_type: console
---

# Requires Packages:

```{r required packages}
#| message: false
#| warning: false
library(tidyverse)
library(survival)
library(survminer)
library(tidymodels)
library(glmnet)
library(censored)
library(gridExtra)
library(grDevices)
```


```{r Output Directory}
outputdir <- paste0('/multiomics/results/figures/survival_analysis/DE/',params$comparison,'/',params$comparison,'_',params$event,'/')

if(!dir.exists(paths = outputdir)) {
  dir.create(path = outputdir,recursive = TRUE)
}
```

## Load data
```{r}
#| message: false

files <- list.files(path = '/multiomics',pattern = 'stats.tsv',recursive = TRUE,include.dirs = TRUE,full.names = TRUE) %>% 
  .[str_detect(.,params$comparison)] %>% 
  .[!str_detect(.,'cluster')]

design <- read_tsv(file = '/multiomics/results/design_files/design_multiomics_mofa.tsv')

if(str_detect(params$comparison,'noG2')){
  design <- design %>% 
    filter(str_detect(Group.Info,'Group2',negate=TRUE))
}

data <- list(proteomics=read_tsv(file = files[str_detect(files,'full')]),
             phosphoproteomics=read_tsv(file = files[str_detect(files,'aggModSeq')]),
             transcriptomics=read_tsv(file = files[str_detect(files,'transcript')]))

idCol <- list(proteomics='Protein.Names',phosphoproteomics='Protein.Names',transcriptomics='Gene.Name')
omics_type <- list('_proteomics','_phosphoproteomics','_transcriptomics')
```

### Filter significant features and prep data
```{r}
set.seed(123)
data <- pmap(list(data,idCol,omics_type),function(x,y,z){
  signifCol <- colnames(x) %>% str_which(pattern = 'Adj') %>% colnames(x)[.]
  x[[y]] <- paste0(make.names(names = x[[y]],unique = TRUE),z)
  data <- x %>% 
  select(all_of(y),all_of(signifCol),design$sample_id) %>% 
  filter(.[[signifCol]]<0.1) %>% 
  drop_na()
})

features <- map2(data,idCol,function(x,y){
  features <- x %>% 
    select(design$sample_id) %>% 
    t() %>% 
    cbind(sample_id=rownames(.),.) %>% 
    as.data.frame()
  colnames(features) <- c('sample_id',x[[y]])
  features <- features %>% 
    mutate(across(x[[y]],as.numeric))
}) %>% reduce(.x = .,.f = ~left_join(x = .x,y = .y,by = 'sample_id'))

omics_variables <- features %>% 
  dplyr::select(-sample_id) %>% 
  colnames()

clinical <- design %>% 
  select(
    sample_id,
    time=params$time,
    event=params$event,
    Age=`Age.(5-year.range,.e.g.,.35(31-35),.40(36-40),.45(41-45).etc.)`,
    Size=T.size,
    NHG,
    Treatment=TreatGroup,
    params$outcome
    ) %>% 
  mutate(NHG=(if_else(NHG=='3','3','1|2')),
         !!params$outcome:=(.[[params$outcome]])) %>% 
  mutate(NHG=factor(NHG,levels=c('1|2','3'),ordered = FALSE),
         Size=factor(Size,levels=c('0','1'),labels=c('≤20mm','>20mm')),
         Treatment=factor(Treatment,levels=c('ChemoEndo','Endo','Chemo','None'),exclude = c('Chemo','None'),ordered = FALSE)) %>%
  drop_na()

clinical_variables <- clinical %>%
  dplyr::select(-c(sample_id,time,event)) %>%
  colnames()

finalFeatures <- left_join(clinical,features) %>% 
  mutate(surv=Surv(time=time,event=event)) %>% 
  select(-c(time,event))

finalFeaturesProcessed <- recipe(x =  finalFeatures) %>%
  update_role(all_of(omics_variables),all_of(clinical_variables),new_role = 'predictor') %>%
  update_role(sample_id,new_role = 'ID') %>%
  update_role(surv, new_role = 'outcome') %>% 
  step_relevel(NHG,ref_level = '1|2') %>%
  step_relevel(Size,ref_level = '≤20mm') %>%
  step_relevel(Treatment,ref_level = 'Endo') %>%
  step_dummy(all_factor_predictors(),naming = function(col,lvl,ord){paste0(col,'_',lvl)}) %>%
  step_normalize(all_of(omics_variables),Age) %>% 
  prep() %>% 
  bake(new_data=NULL)

clinical_variables <- finalFeaturesProcessed %>%
  dplyr::select(-c(surv,sample_id,all_of(omics_variables))) %>%
  colnames()
```

## Fit Univariable Cox Model
```{r}
cox_models_omics <- map(.x = omics_variables,.f = function(x){
  data <- finalFeaturesProcessed %>% dplyr::select(sample_id,surv,x) 

  hr_factors <- proportional_hazards() %>% 
    set_engine('survival') %>% 
    set_mode('censored regression')

  wf <- workflow() %>%
    add_variables(outcomes = surv,predictors = x) %>% 
    add_model(hr_factors,formula = surv~.) %>% 
    fit(data=data)
  
  return(wf)
})

names(cox_models_omics) <- omics_variables

signif_omics <- map(.x = seq_along(cox_models_omics),function(x){
  model <- extract_fit_engine(cox_models_omics[[x]]) %>% 
    summary()
  pluck(model,'coefficients') %>% as.data.frame()
}) %>% 
  list_rbind() %>% 
  mutate(PValue.Adj=p.adjust(.[['Pr(>|z|)']],method = 'fdr')) %>% 
  filter(.[['Pr(>|z|)']]<0.01) %>% 
  rownames() %>% 
  as_vector() %>% 
  unique

```

## Fit Multivariable Cox Model
```{r}
catchWarning <- function(expr){
  warning_message <- NULL
  warnHandler <- function(warning){
    warning_message <<- c(warning_message,list(warning))
    invokeRestart('muffleWarning')
  }
  res <- withCallingHandlers(expr = expr, warning = warnHandler)
  list(result=res,warning=warning_message)
}

cox_models_omics_multivariate <- map(.x = signif_omics,.f = function(x){
data <- finalFeaturesProcessed %>% 
  dplyr::select(sample_id,surv,x,all_of(clinical_variables))

hr_factors <- proportional_hazards() %>% 
  set_engine('survival') %>% 
  set_mode('censored regression')

wf <- catchWarning({workflow() %>%
    add_variables(outcomes = surv,predictors = c(x,all_of(clinical_variables))) %>% 
    add_model(hr_factors,formula = surv~.) %>% 
    fit(data=data)})
})

```

### Select significant features and generate forest plots
```{r}
multiTable <- map(.x = seq_len(length(cox_models_omics_multivariate)),function(x){
  model <- extract_fit_engine(cox_models_omics_multivariate[[x]][['result']]) %>% 
    summary()
  tibble(Feature=pluck(model,'coefficients') %>% as.data.frame() %>% .[1,] %>% rownames(),
         pluck(model,'coefficients') %>% as_tibble() %>% .[1,],
         LogTest_pvalue=pluck(model,'logtest') %>% .[3],
         SCTest_pvalue=pluck(model,'sctest') %>% .[3],
         WaldTest_pvalue=pluck(model,'waldtest') %>% .[3])
}) %>% 
  list_rbind() %>% 
    mutate(PValue.Adj=p.adjust(.[['Pr(>|z|)']],method = 'fdr')) %>% 
    relocate(PValue.Adj,.after = `Pr(>|z|)`)

names(cox_models_omics_multivariate) <- multiTable[["Feature"]]

signifMulti <- multiTable %>% 
  filter(`Pr(>|z|)`<0.01) %>% 
  arrange(PValue.Adj)

multiCoxFilter <- keep(cox_models_omics_multivariate,names(cox_models_omics_multivariate) %in% signifMulti[["Feature"]])

# Function to log errors to a file
log_error <- function(error_message) {
  writeLines(error_message, con = paste0(outputdir,"error_log.txt"))
}

create_safe_forest_plot <- function(fit, data,index) {
  tryCatch({
    # Check proportional hazards assumption
    fitcheck <- cox.zph(fit = fit)
    
    # Attempt to create the forest plot
    plotPH <- ggforest(model = fit, data = data)
    
    # Return the fitcheck and plot as a list
    list(fitcheck = fitcheck, plotPH = plotPH)
  }, error = function(e) {
    # Handle the error by printing a message and returning default values
    error_message <- paste(Sys.time(), " - An error occurred while generating the forest plot: ", e$message, sep = "")
    message(error_message)
    log_error(error_message)
    # Return default values (NA for fitcheck and a blank plot for plotPH)
    fitUni <- extract_fit_engine(cox_models_omics[[names(multiCoxFilter[index])]])
    default_plot <- ggforest(model = fitUni,data = data)
    list(fitcheck = NA, plotPH = default_plot)
  })
}

# Generate list of plots with error handling
multivariate_res <- map(seq_along(multiCoxFilter), function(x) {
  fit <- extract_fit_engine(multiCoxFilter[[x]][['result']])
  create_safe_forest_plot(fit, finalFeaturesProcessed,index = x)
})

cairo_pdf(filename = paste0(outputdir,'forestplot_multivariable_DE.pdf'),onefile = TRUE,width = 9,height = 9)
plots <- map(seq_along(multivariate_res),function(x){multivariate_res[[x]][[2]] %>% ggplotGrob()})
gridExtra::marrangeGrob(grobs = plots,ncol = 1,nrow = 1,top = '')
dev.off()
```