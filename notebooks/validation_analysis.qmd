---
title: "validation"
format: html
execute: 
  output: false
  
params:
  time: 'RFi_days'
  event: 'RFi_event'
  comparison: 'AllSamples_noG2'

editor_options: 
  chunk_output_type: console
---
# Requires Packages:

```{r required packages}
#| message: false
#| warning: false
library(tidyverse)
library(survival)
library(survminer)
library(tidymodels)
library(censored)
library(gridExtra)
library(grDevices)
library(forestmodel)
library(NormalyzerDE)
```

```{r Output Directory}
outputdir <- paste0('/multiomics/results/figures/validation/',params$comparison,'_',params$event,'/')

if(!dir.exists(paths = outputdir)) {
  dir.create(path = outputdir,recursive = TRUE)
}
```

```{r}
# samples <- openxlsx::read.xlsx(xlsxFile = 'Supplementary Data Table 1 - 2021-12-17.xlsx',sheet = 1)
design <- readxl::read_xlsx(path = '/multiomics/data/sample_selection/Supplementary Data Table 1 - 2021-12-17.xlsx',sheet = 1,n_max = Inf,guess_max = 5000)
design_study <- read_tsv(file = '/multiomics/results/design_files/mergedDesign_ref_mutation.tsv')
design_filter <- design %>% filter(!(.[["Sample"]] %in% design_study[["Sample"]]))
```

# Sample groups with outlier removal and ranking
```{r}
#Outlier Removal
sampleFilter <- design_filter %>%
  filter(ReferenceYear<=2016,
    # between(ReferenceYear,2010,2016),
         # RNA.NDConc >= 200,
         ER=='Positive',
         HER2=='Negative',
         # !is.na(NHG),
         # !is.na(DRFi_event),
         # !is.na(RFi_event),
         # !is.na(OS_event),
         !duplicated(Sample)
         )

sampleFilter <- sampleFilter %>% mutate(sample_id=str_split_i(GEX.assay,'\\.',1)) %>% relocate(sample_id,.before = 1)

# sampleFilterFollowUp <- design_filter %>% 
#   filter(Follow.up.cohort==TRUE,
#          RNA.NDConc >= 200,
#          ER=='Positive',
#          HER2=='Negative',
#          !is.na(NHG),
#          !is.na(DRFi_event))

# for (i in c(1:3)) {
#   quartiles <- quantile(x = sampleFilter$Size.mm,probs = c(0.25,0.75),na.rm = TRUE)
#   interQuantileR <- IQR(sampleFilter$Size.mm,na.rm = TRUE)
#   lowerRange <- quartiles[1]-1.5*interQuantileR
#   upperRange <- quartiles[2]+1.5*interQuantileR
#   sampleFilter <- sampleFilter %>%
#     filter(between(Size.mm,lowerRange,upperRange))
#   i <- i+1
#   print(i)
# }

# for (i in c(1:3)) {
#   quartiles <- quantile(x = sampleFilterFollowUp$Size.mm,probs = c(0.25,0.75),na.rm = TRUE)
#   interQuantileR <- IQR(sampleFilterFollowUp$Size.mm,na.rm = TRUE)
#   lowerRange <- quartiles[1]-1.5*interQuantileR
#   upperRange <- quartiles[2]+1.5*interQuantileR
#   sampleFilterFollowUp <- sampleFilterFollowUp %>% 
#     filter(between(Size.mm,lowerRange,upperRange))
#   i <- i+1
#   print(i)
# }
```

```{r}
data_all <- read_delim(file = '/multiomics/data/transcriptomics/SCANB.9206.genematrix_noNeg.txt')
data_filter <- data_all %>% select(Gene=1,sampleFilter$GEX.assay)
load('/multiomics/data/transcriptomics/Gene.ID.ann.Rdata')
rm(list = c('design','data_all'))
invisible(gc())
```

```{r}
colTypes <- cols("Residue"=col_character(),.default = col_guess())

coxFeats <- list.files(path = '/multiomics/results/figures/survival_analysis/',pattern = 'cox_analysis_res',full.names = TRUE,recursive = TRUE) %>% 
  .[str_detect(.,params$comparison)] %>% 
  .[str_detect(.,params$event)] %>% 
  map(function(x){read_tsv(file = x,col_types = colTypes)}) %>% 
  list_rbind() %>% 
  dplyr::filter(.[["p.value_univariable"]]<0.05 | .[["p.value_multivariable"]]<0.05) %>% 
  dplyr::select(variable) %>% 
  unlist() %>% 
  unique()

idMap <- list.files(path = "/multiomics/results/",pattern = "featIDs\\.tsv",full.names = TRUE,recursive = TRUE) %>% 
  .[str_detect(.,params$comparison)] %>% 
  map(function(x){read_tsv(file = x,col_types = colTypes)}) %>% 
  list_rbind() %>% 
  filter(!duplicated(.)) 

geneIds <- idMap %>% 
  filter(Protein.Names %in% coxFeats | Unique.Ids %in% coxFeats) %>% 
  unite(col = 'Gene',c('Genes','Gene.Name'),sep = '',na.rm = TRUE,remove = FALSE) %>% 
  select(Gene) %>% 
  as_vector() %>% 
  str_split(.,pattern = "\\;") %>% 
  unlist() %>% 
  unique()

common_genes <- Gene.ID.ann %>% filter(Gene.Name %in% geneIds)
features <- data_filter %>% filter(Gene %in% common_genes[["Gene.ID"]])

if(identical(features[["Gene"]],common_genes[["Gene.ID"]])){
  features[["Gene"]] <- common_genes[["Gene.Name"]]
}else{
  print("Names not identical")
}

features <- features %>% select(-Gene) %>% performCyclicLoessNormalization(noLogTransform = FALSE)
colnames(features) <- colnames(features) %>% str_split_i(pattern = '\\.',i = 1)
features <- features %>% as_tibble() %>% mutate(Gene=common_genes[["Gene.Name"]]) %>% relocate(Gene,.before = 1) %>% na.omit()

newColNames <- features[["Gene"]]

features <- features %>% select(sampleFilter[["sample_id"]]) %>% t() %>% cbind(sample_id=rownames(.),.) %>% as.data.frame()
colnames(features) <- c('sample_id',newColNames)
features <- features %>% mutate(across(newColNames,as.numeric))
```

# Analysis of all samples
```{r}
clinical <- sampleFilter %>% 
  select(
    sample_id,
    time=params$time,
    event=params$event,
    Age=`Age (5-year range, e.g., 35(31-35), 40(36-40), 45(41-45) etc.)`,
    Size=T.size,
    NHG,
    LN,
    Treatment=TreatGroup
    ) %>% 
  mutate(NHG=factor(NHG,levels=c('1','2','3'),ordered = FALSE),
         LN=factor(LN,levels=c('0','1')),
         Size=factor(Size,levels=c('0','1'),labels=c('≤20mm','>20mm')),
         Treatment=factor(Treatment,levels=c('ChemoEndo','Endo','Chemo','None'),exclude = c('Chemo','None'),ordered = FALSE)) %>%
  drop_na()

# At this stage, there are 3399(248) RFi events, 3400(180) DRFi events and 4640(618) OS events

clinical_variables <- clinical %>%
  dplyr::select(-c(sample_id,time,event)) %>%
  colnames()

omics_variables <- features %>% select(-sample_id) %>% colnames()

finalFeatures <- left_join(clinical,features) %>% 
  mutate(surv=Surv(time=time,event=event)) %>% 
  select(-c(time,event))

finalFeaturesProcessed <- recipe(x =  finalFeatures) %>%
  update_role(all_of(omics_variables),all_of(clinical_variables),new_role = 'predictor') %>%
  update_role(sample_id,new_role = 'ID') %>%
  update_role(surv, new_role = 'outcome') %>% 
  step_relevel(NHG,ref_level = '1') %>%
  step_relevel(Size,ref_level = '≤20mm') %>%
  step_relevel(Treatment,ref_level = 'Endo') %>%
  step_normalize(all_of(omics_variables),Age) %>% 
  prep() %>% 
  bake(new_data=NULL)
```

## Fit Univariable Cox Model
```{r}
cox_models_omics <- map(.x = omics_variables,.f = function(x){
  data <- finalFeaturesProcessed %>% dplyr::select(sample_id,surv,x) 

  hr_factors <- proportional_hazards() %>% 
    set_engine('survival') %>% 
    set_mode('censored regression')

  wf <- workflow() %>%
    add_variables(outcomes = surv,predictors = x) %>% 
    add_model(hr_factors,formula = surv~.) %>% 
    fit(data=data)
  
  return(wf)
})

names(cox_models_omics) <- omics_variables

modelList <- map(cox_models_omics,extract_fit_engine)
fitCheck <- map(modelList,cox.zph) %>% 
  map(~pluck(.x,'table',6)) %>% 
  unlist() %>% 
  .[.>0.05]

modelList <- keep(modelList,names(modelList) %in% names(fitCheck))

signif_omics <- map(.x = seq_along(modelList),function(x){
  model <- modelList[[x]] %>% 
    summary()
  pluck(model,'coefficients') %>% as.data.frame()
}) %>% 
  list_rbind() %>% 
  mutate(PValue.Adj=p.adjust(.[['Pr(>|z|)']],method = 'fdr')) %>% 
  filter(.[['Pr(>|z|)']]<0.05) %>%
  rownames() %>% 
  as_vector() %>% 
  unique

if(!is_empty(signif_omics)){
  uniplot <- keep(modelList,names(modelList) %in% signif_omics) %>%
    forest_model(model_list = .,recalculate_width = TRUE,recalculate_height = TRUE,merge_models = TRUE,format_options = forest_model_format_options(text_size = 3))
  
  ggsave(filename = 'forestplot_univariable_allSamples.pdf',plot = uniplot,device = 'pdf',path = outputdir,dpi = 600,width = 9,height = 9,units = 'in')
}else(
  writeLines(text = 'No variables were deemed significant (p-value < 0.05) at univariable model',con = paste0(outputdir,'error_allSamples.txt'))
)

uniTable <- forest_model(model_list = modelList,return_data = TRUE) %>% 
  pluck('plot_data','forest_data') %>% 
  select(-c(1,7,14,15,16)) %>% 
  rename_with(.cols = c(6:11),.fn = ~ paste0(.x,'_univariable'))
```

## Fit Multivariable Cox Model
```{r}
catchWarning <- function(expr){
  warning_message <- NULL
  warnHandler <- function(warning){
    warning_message <<- c(warning_message,list(warning))
    invokeRestart('muffleWarning')
  }
  res <- withCallingHandlers(expr = expr, warning = warnHandler)
  list(result=res,warning=warning_message)
}

cox_models_omics_multivariate <- map(.x = names(modelList),.f = function(x){
data <- finalFeaturesProcessed %>% 
  dplyr::select(sample_id,surv,x,all_of(clinical_variables))

hr_factors <- proportional_hazards() %>% 
  set_engine('survival') %>% 
  set_mode('censored regression')

wf <- catchWarning({workflow() %>%
    add_variables(outcomes = surv,predictors = c(x,all_of(clinical_variables))) %>% 
    add_model(hr_factors,formula = surv~.) %>% 
    fit(data=data)})
})

```

### Select significant features and generate forest plots
```{r}
names(cox_models_omics_multivariate) <- names(modelList)

signif_omics <- map(.x = seq_along(cox_models_omics_multivariate),function(x){
  model <- extract_fit_engine(cox_models_omics_multivariate[[x]][['result']]) %>% 
    summary()
  tibble(Feature=pluck(model,'coefficients') %>% as.data.frame() %>% .[1,] %>% rownames(),
         pluck(model,'coefficients') %>% as_tibble() %>% .[1,])
}) %>% 
  list_rbind() %>% 
  filter(`Pr(>|z|)`<0.05) %>% 
  select(Feature) %>% 
  as_vector()

# Function to log errors to a file
log_error <- function(error_message) {
  writeLines(error_message, con = paste0(outputdir,"error_log.txt"))
}

create_safe_forest_plot <- function(fit, data,index) {
  tryCatch({
    # Attempt to create the forest plot
    plotPH <- forest_model(model = fit,exclude_infinite_cis = TRUE,recalculate_width = TRUE,recalculate_height = TRUE,format_options = forest_model_format_options(text_size = 3),return_data = TRUE)

  }, error = function(e) {
    # Handle the error by printing a message and returning default values
    error_message <- paste(Sys.time(), " - An error occurred while generating the forest plot: ", e$message, sep = "")
    message(error_message)
    log_error(error_message)
  })
}

# Generate list of plots with error handling
multivariate_res <- map(seq_along(cox_models_omics_multivariate), function(x) {
  fit <- extract_fit_engine(cox_models_omics_multivariate[[x]][['result']])
  create_safe_forest_plot(fit, finalFeaturesProcessed,index = x)
})

names(multivariate_res) <- names(cox_models_omics_multivariate)

multivariate_res <- compact(multivariate_res)

multiPlot <- keep(multivariate_res, names(multivariate_res) %in% signif_omics)

multiTable <- map(multivariate_res,function(x){
  resTable <- pluck(x,'plot_data','forest_data') %>% 
    filter(variable %in% omics_variables) %>% 
    select(c(2,10:15))
}) %>% 
  list_rbind() %>% 
  rename_with(.cols = -c(1),.fn = ~ paste0(.x,'_multivariable'))

finalTable <- full_join(uniTable,multiTable)
write_tsv(x = finalTable,file = paste0(outputdir,'cox_analysis_res.tsv'))

cairo_pdf(filename = paste0(outputdir,'forestplot_multivariable.pdf'),onefile = TRUE,width = 9,height = 9)
  plots <- map(seq_along(multiPlot),function(x){multiPlot[[x]][['plot']] %>% ggplotGrob()})
  gridExtra::marrangeGrob(grobs = plots,ncol = 1,nrow = 1,top = '')
dev.off()
```

```{r}
varsKeep <- c('features','common_genes','sampleFilter','params','outputdir')
rm(list = setdiff(ls(),varsKeep))
invisible(gc())
```


# Analysis of LN Negative
```{r}
clinical <- sampleFilter %>% 
  select(
    sample_id,
    time=params$time,
    event=params$event,
    Age=`Age (5-year range, e.g., 35(31-35), 40(36-40), 45(41-45) etc.)`,
    Size=T.size,
    NHG,
    LN,
    Treatment=TreatGroup
    ) %>% 
  mutate(NHG=factor(NHG,levels=c('1','2','3'),ordered = FALSE),
         LN=factor(LN,levels=c('0','1')),
         Size=factor(Size,levels=c('0','1'),labels=c('≤20mm','>20mm')),
         Treatment=factor(Treatment,levels=c('ChemoEndo','Endo','Chemo','None'),exclude = c('Chemo','None'),ordered = FALSE)) %>%
  filter(LN==0) %>% 
  drop_na()

# At this stage, there are 3399(248) RFi events, 3400(180) DRFi events and 4640(618) OS events

clinical_variables <- clinical %>%
  dplyr::select(-c(sample_id,time,event)) %>%
  colnames()

omics_variables <- features %>% select(-sample_id) %>% colnames()

finalFeatures <- left_join(clinical,features) %>% 
  mutate(surv=Surv(time=time,event=event)) %>% 
  select(-c(time,event))

finalFeaturesProcessed <- recipe(x =  finalFeatures) %>%
  update_role(all_of(omics_variables),all_of(clinical_variables),new_role = 'predictor') %>%
  update_role(sample_id,new_role = 'ID') %>%
  update_role(surv, new_role = 'outcome') %>% 
  step_relevel(NHG,ref_level = '1') %>%
  step_relevel(Size,ref_level = '≤20mm') %>%
  step_relevel(Treatment,ref_level = 'Endo') %>%
  step_normalize(all_of(omics_variables),Age) %>% 
  prep() %>% 
  bake(new_data=NULL)
```

## Fit Univariable Cox Model
```{r}
cox_models_omics <- map(.x = omics_variables,.f = function(x){
  data <- finalFeaturesProcessed %>% dplyr::select(sample_id,surv,x) 

  hr_factors <- proportional_hazards() %>% 
    set_engine('survival') %>% 
    set_mode('censored regression')

  wf <- workflow() %>%
    add_variables(outcomes = surv,predictors = x) %>% 
    add_model(hr_factors,formula = surv~.) %>% 
    fit(data=data)
  
  return(wf)
})

names(cox_models_omics) <- omics_variables

modelList <- map(cox_models_omics,extract_fit_engine)
fitCheck <- map(modelList,cox.zph) %>% 
  map(~pluck(.x,'table',6)) %>% 
  unlist() %>% 
  .[.>0.05]

modelList <- keep(modelList,names(modelList) %in% names(fitCheck))

signif_omics <- map(.x = seq_along(modelList),function(x){
  model <- modelList[[x]] %>% 
    summary()
  pluck(model,'coefficients') %>% as.data.frame()
}) %>% 
  list_rbind() %>% 
  mutate(PValue.Adj=p.adjust(.[['Pr(>|z|)']],method = 'fdr')) %>% 
  filter(.[['Pr(>|z|)']]<0.05) %>%
  rownames() %>% 
  as_vector() %>% 
  unique

if(!is_empty(signif_omics)){
  uniplot <- keep(modelList,names(modelList) %in% signif_omics) %>%
    forest_model(model_list = .,recalculate_width = TRUE,recalculate_height = TRUE,merge_models = TRUE,format_options = forest_model_format_options(text_size = 3))
  
  ggsave(filename = 'forestplot_univariable_LNneg.pdf',plot = uniplot,device = 'pdf',path = outputdir,dpi = 600,width = 9,height = 9,units = 'in')
}else(
  writeLines(text = 'No variables were deemed significant (p-value < 0.05) at univariable model',con = paste0(outputdir,'error_LNneg.txt'))
)

uniTable <- forest_model(model_list = modelList,return_data = TRUE) %>% 
  pluck('plot_data','forest_data') %>% 
  select(-c(1,7,14,15,16)) %>% 
  rename_with(.cols = c(6:11),.fn = ~ paste0(.x,'_univariable'))
```

## Fit Multivariable Cox Model
```{r}
catchWarning <- function(expr){
  warning_message <- NULL
  warnHandler <- function(warning){
    warning_message <<- c(warning_message,list(warning))
    invokeRestart('muffleWarning')
  }
  res <- withCallingHandlers(expr = expr, warning = warnHandler)
  list(result=res,warning=warning_message)
}

cox_models_omics_multivariate <- map(.x = names(modelList),.f = function(x){
data <- finalFeaturesProcessed %>% 
  dplyr::select(sample_id,surv,x,all_of(clinical_variables))

hr_factors <- proportional_hazards() %>% 
  set_engine('survival') %>% 
  set_mode('censored regression')

wf <- catchWarning({workflow() %>%
    add_variables(outcomes = surv,predictors = c(x,all_of(clinical_variables))) %>% 
    add_model(hr_factors,formula = surv~.) %>% 
    fit(data=data)})
})

```

### Select significant features and generate forest plots
```{r}
names(cox_models_omics_multivariate) <- names(modelList)

signif_omics <- map(.x = seq_along(cox_models_omics_multivariate),function(x){
  model <- extract_fit_engine(cox_models_omics_multivariate[[x]][['result']]) %>% 
    summary()
  tibble(Feature=pluck(model,'coefficients') %>% as.data.frame() %>% .[1,] %>% rownames(),
         pluck(model,'coefficients') %>% as_tibble() %>% .[1,])
}) %>% 
  list_rbind() %>% 
  filter(`Pr(>|z|)`<0.05) %>% 
  select(Feature) %>% 
  as_vector()

# Function to log errors to a file
log_error <- function(error_message) {
  writeLines(error_message, con = paste0(outputdir,"error_log.txt"))
}

create_safe_forest_plot <- function(fit, data,index) {
  tryCatch({
    # Attempt to create the forest plot
    plotPH <- forest_model(model = fit,exclude_infinite_cis = TRUE,recalculate_width = TRUE,recalculate_height = TRUE,format_options = forest_model_format_options(text_size = 3),return_data = TRUE)

  }, error = function(e) {
    # Handle the error by printing a message and returning default values
    error_message <- paste(Sys.time(), " - An error occurred while generating the forest plot: ", e$message, sep = "")
    message(error_message)
    log_error(error_message)
  })
}

# Generate list of plots with error handling
multivariate_res <- map(seq_along(cox_models_omics_multivariate), function(x) {
  fit <- extract_fit_engine(cox_models_omics_multivariate[[x]][['result']])
  create_safe_forest_plot(fit, finalFeaturesProcessed,index = x)
})

names(multivariate_res) <- names(cox_models_omics_multivariate)

multivariate_res <- compact(multivariate_res)

multiPlot <- keep(multivariate_res, names(multivariate_res) %in% signif_omics)

multiTable <- map(multivariate_res,function(x){
  resTable <- pluck(x,'plot_data','forest_data') %>% 
    filter(variable %in% omics_variables) %>% 
    select(c(2,10:15))
}) %>% 
  list_rbind() %>% 
  rename_with(.cols = -c(1),.fn = ~ paste0(.x,'_multivariable'))

finalTable <- full_join(uniTable,multiTable)
write_tsv(x = finalTable,file = paste0(outputdir,'cox_analysis_res_LNneg.tsv'))

cairo_pdf(filename = paste0(outputdir,'forestplot_multivariable_LNneg.pdf'),onefile = TRUE,width = 9,height = 9)
  plots <- map(seq_along(multiPlot),function(x){multiPlot[[x]][['plot']] %>% ggplotGrob()})
  gridExtra::marrangeGrob(grobs = plots,ncol = 1,nrow = 1,top = '')
dev.off()
```

```{r}
varsKeep <- c('features','common_genes','sampleFilter','params','outputdir')
rm(list = setdiff(ls(),varsKeep))
invisible(gc())
```

# Analysis of LN Positive
```{r}
clinical <- sampleFilter %>% 
  select(
    sample_id,
    time=params$time,
    event=params$event,
    Age=`Age (5-year range, e.g., 35(31-35), 40(36-40), 45(41-45) etc.)`,
    Size=T.size,
    NHG,
    LN,
    Treatment=TreatGroup
    ) %>% 
  mutate(NHG=factor(NHG,levels=c('1','2','3'),ordered = FALSE),
         LN=factor(LN,levels=c('0','1')),
         Size=factor(Size,levels=c('0','1'),labels=c('≤20mm','>20mm')),
         Treatment=factor(Treatment,levels=c('ChemoEndo','Endo','Chemo','None'),exclude = c('Chemo','None'),ordered = FALSE)) %>%
  filter(LN==1) %>% 
  drop_na()

# At this stage, there are 3399(248) RFi events, 3400(180) DRFi events and 4640(618) OS events

clinical_variables <- clinical %>%
  dplyr::select(-c(sample_id,time,event)) %>%
  colnames()

omics_variables <- features %>% select(-sample_id) %>% colnames()

finalFeatures <- left_join(clinical,features) %>% 
  mutate(surv=Surv(time=time,event=event)) %>% 
  select(-c(time,event))

finalFeaturesProcessed <- recipe(x =  finalFeatures) %>%
  update_role(all_of(omics_variables),all_of(clinical_variables),new_role = 'predictor') %>%
  update_role(sample_id,new_role = 'ID') %>%
  update_role(surv, new_role = 'outcome') %>% 
  step_relevel(NHG,ref_level = '1') %>%
  step_relevel(Size,ref_level = '≤20mm') %>%
  step_relevel(Treatment,ref_level = 'Endo') %>%
  step_normalize(all_of(omics_variables),Age) %>% 
  prep() %>% 
  bake(new_data=NULL)
```

## Fit Univariable Cox Model
```{r}
cox_models_omics <- map(.x = omics_variables,.f = function(x){
  data <- finalFeaturesProcessed %>% dplyr::select(sample_id,surv,x) 

  hr_factors <- proportional_hazards() %>% 
    set_engine('survival') %>% 
    set_mode('censored regression')

  wf <- workflow() %>%
    add_variables(outcomes = surv,predictors = x) %>% 
    add_model(hr_factors,formula = surv~.) %>% 
    fit(data=data)
  
  return(wf)
})

names(cox_models_omics) <- omics_variables

modelList <- map(cox_models_omics,extract_fit_engine)
fitCheck <- map(modelList,cox.zph) %>% 
  map(~pluck(.x,'table',6)) %>% 
  unlist() %>% 
  .[.>0.05]

modelList <- keep(modelList,names(modelList) %in% names(fitCheck))

signif_omics <- map(.x = seq_along(modelList),function(x){
  model <- modelList[[x]] %>% 
    summary()
  pluck(model,'coefficients') %>% as.data.frame()
}) %>% 
  list_rbind() %>% 
  mutate(PValue.Adj=p.adjust(.[['Pr(>|z|)']],method = 'fdr')) %>% 
  filter(.[['Pr(>|z|)']]<0.05) %>%
  rownames() %>% 
  as_vector() %>% 
  unique

if(!is_empty(signif_omics)){
  uniplot <- keep(modelList,names(modelList) %in% signif_omics) %>%
    forest_model(model_list = .,recalculate_width = TRUE,recalculate_height = TRUE,merge_models = TRUE,format_options = forest_model_format_options(text_size = 3))
  
  ggsave(filename = 'forestplot_univariable_LNpos.pdf',plot = uniplot,device = 'pdf',path = outputdir,dpi = 600,width = 9,height = 9,units = 'in')
}else(
  writeLines(text = 'No variables were deemed significant (p-value < 0.05) at univariable model',con = paste0(outputdir,'error_LNpos.txt'))
)

uniTable <- forest_model(model_list = modelList,return_data = TRUE) %>% 
  pluck('plot_data','forest_data') %>% 
  select(-c(1,7,14,15,16)) %>% 
  rename_with(.cols = c(6:11),.fn = ~ paste0(.x,'_univariable'))
```

## Fit Multivariable Cox Model
```{r}
catchWarning <- function(expr){
  warning_message <- NULL
  warnHandler <- function(warning){
    warning_message <<- c(warning_message,list(warning))
    invokeRestart('muffleWarning')
  }
  res <- withCallingHandlers(expr = expr, warning = warnHandler)
  list(result=res,warning=warning_message)
}

cox_models_omics_multivariate <- map(.x = names(modelList),.f = function(x){
data <- finalFeaturesProcessed %>% 
  dplyr::select(sample_id,surv,x,all_of(clinical_variables))

hr_factors <- proportional_hazards() %>% 
  set_engine('survival') %>% 
  set_mode('censored regression')

wf <- catchWarning({workflow() %>%
    add_variables(outcomes = surv,predictors = c(x,all_of(clinical_variables))) %>% 
    add_model(hr_factors,formula = surv~.) %>% 
    fit(data=data)})
})

```

### Select significant features and generate forest plots
```{r}
names(cox_models_omics_multivariate) <- names(modelList)

signif_omics <- map(.x = seq_along(cox_models_omics_multivariate),function(x){
  model <- extract_fit_engine(cox_models_omics_multivariate[[x]][['result']]) %>% 
    summary()
  tibble(Feature=pluck(model,'coefficients') %>% as.data.frame() %>% .[1,] %>% rownames(),
         pluck(model,'coefficients') %>% as_tibble() %>% .[1,])
}) %>% 
  list_rbind() %>% 
  filter(`Pr(>|z|)`<0.05) %>% 
  select(Feature) %>% 
  as_vector()

# Function to log errors to a file
log_error <- function(error_message) {
  writeLines(error_message, con = paste0(outputdir,"error_log.txt"))
}

create_safe_forest_plot <- function(fit, data,index) {
  tryCatch({
    # Attempt to create the forest plot
    plotPH <- forest_model(model = fit,exclude_infinite_cis = TRUE,recalculate_width = TRUE,recalculate_height = TRUE,format_options = forest_model_format_options(text_size = 3),return_data = TRUE)

  }, error = function(e) {
    # Handle the error by printing a message and returning default values
    error_message <- paste(Sys.time(), " - An error occurred while generating the forest plot: ", e$message, sep = "")
    message(error_message)
    log_error(error_message)
  })
}

# Generate list of plots with error handling
multivariate_res <- map(seq_along(cox_models_omics_multivariate), function(x) {
  fit <- extract_fit_engine(cox_models_omics_multivariate[[x]][['result']])
  create_safe_forest_plot(fit, finalFeaturesProcessed,index = x)
})

names(multivariate_res) <- names(cox_models_omics_multivariate)

multivariate_res <- compact(multivariate_res)

multiPlot <- keep(multivariate_res, names(multivariate_res) %in% signif_omics)

multiTable <- map(multivariate_res,function(x){
  resTable <- pluck(x,'plot_data','forest_data') %>% 
    filter(variable %in% omics_variables) %>% 
    select(c(2,10:15))
}) %>% 
  list_rbind() %>% 
  rename_with(.cols = -c(1),.fn = ~ paste0(.x,'_multivariable'))

finalTable <- full_join(uniTable,multiTable)
write_tsv(x = finalTable,file = paste0(outputdir,'cox_analysis_res_LNpos.tsv'))

cairo_pdf(filename = paste0(outputdir,'forestplot_multivariable_LNpos.pdf'),onefile = TRUE,width = 9,height = 9)
  plots <- map(seq_along(multiPlot),function(x){multiPlot[[x]][['plot']] %>% ggplotGrob()})
  gridExtra::marrangeGrob(grobs = plots,ncol = 1,nrow = 1,top = '')
dev.off()
```

```{r}
varsKeep <- c('features','common_genes','sampleFilter','params','outputdir')
rm(list = setdiff(ls(),varsKeep))
invisible(gc())
```
