---
title: "Survival Analysis"
author: "Sergio Mosquim Junior"
format:
  html:
    toc: true
    code-fold: true
    embed-resources: true
    toc-location: left
    smooth-scroll: true
    message: false
engine: knitr
params:
  outputdir: '~/multiomics/results/figures/survival_analysis/DE/DuctalvsLobular/proteome/'
  dataPath: '~/multiomics/results/differentialexpression/DuctalvsLobular/fullproteome_protein/fullproteome_protein_stats.tsv'
  designPath: '~/multiomics/results/design_files/design_Full_noPool.tsv'
  idCol: 'Protein.Names'
  topnum: 10
---

# Requires Packages:

```{r required packages}
#| message: false
#| warning: false
library(tidyverse)
library(survival)
library(survminer)
```

# Survival Analysis
```{r}
if(!dir.exists(paths = params$outputdir)) {
  dir.create(path = params$outputdir,recursive = TRUE)
}
```

## Load data
```{r}
#| message: false
design <- read_tsv(file = params$designPath)
data <- read_tsv(file = params$dataPath)
data[[params$idCol]] <- make.names(names = data[[params$idCol]],unique = TRUE)
```

### Filter significant features
```{r}
signifCol <- colnames(data) %>% str_which(pattern = 'Adj') %>% colnames(data)[.]
data <- data %>% 
  select(where(is.character),signifCol,design$sample_id) %>% 
  slice_min(.,order_by = .[[signifCol]],n = params$topnum)
```


### Fit Cox Model
  This creates a survival object with distant recurrence free interval as time and DRFi_event (death) as the event.
  A Cox Propotional Hazards model is fit with all factors as variables followed by evaluating the model with the scaled Schoenfeld test which tests the null hypothesis that the variable is stable over time, therefore respecting the Cox test assumptions. A graphical representation of the scaled Schoenfeld residuals can also be seen.
```{r}
#| tbl-column: margin
objSurv <- Surv(time =design$DRFi_days,event = design$DRFi_event)
variables <- data[[params$idCol]]
dataFit <- data %>% select(design$sample_id) %>% t %>% as.data.frame
colnames(dataFit) <- variables
dataFit <- dataFit %>% mutate(sample_id=rownames(.),.)

coxFormula <- reformulate(termlabels = variables,response = 'objSurv')

fit <- coxph(formula = coxFormula,data = dataFit)
summary(fit)
```
```{r}
#| tbl-column: page
#| tbl-colwidths: true
fitcheck <- cox.zph(fit)
fitcheck
```
```{r}
pdf(file = paste0(params$outputdir,'zph_plot.pdf'),width = 20,height = 20,onefile = TRUE)
ggcoxzph(fitcheck)
dev.off()
```

### Plot Hazard Ratios
```{r}
hrPlot <- ggforest(fit,data = dataFit)
ggsave(filename = 'HR_plot_factors.pdf',plot = hrPlot,device = 'pdf',path = params$outputdir,width = 10,height = 10,dpi = 300)
```


### Calculate cut points and fit model to high vs low
```{r}
dataKM <- design %>% select(sample_id,time=DRFi_days,event=DRFi_event,InvCa.type) %>% left_join(.,dataFit)

featCut <- surv_cutpoint(data = dataKM,variables = variables)

finalFeatures <- map(.x = variables,.f = function(x){(dataKM[[x]]>featCut[["cutpoint"]][x,1])})
names(finalFeatures) <- variables
finalFeatures <- as.data.frame(finalFeatures) %>% 
  mutate(across(everything(),~if_else(condition = .x, true = 'High', false = 'Low', missing = NA_character_))) %>% 
  mutate(InvCa.type=design$InvCa.type)

variables <- c(variables,'InvCa.type')

objSurv <- Surv(time = dataKM$time,event = dataKM$event)

survFormula <- reformulate(termlabels = variables,response = 'objSurv')

fitFeatures <- surv_fit(formula = survFormula,data = finalFeatures)
```

###### Kaplan-Meier plots
```{r}
#| warning: false
kmPlots <- map(.x = variables,.f = function(x){
  survFormula <- reformulate(termlabels = x,response = 'objSurv')
  fit <- surv_fit(formula = survFormula,data = finalFeatures)
  ggsurvplot(fit = fit,data = finalFeatures,conf.int = TRUE,pval = TRUE,pval.method = TRUE,surv.median.line = 'hv',risk.table = TRUE)
  })
```
```{r}
invisible(pdf(file = paste0(params$outputdir,'kaplan_meier.pdf'),width = 20,height = 10,onefile = TRUE))
invisible(map(1:length(kmPlots),~print(kmPlots[[.x]])))
invisible(dev.off())
```