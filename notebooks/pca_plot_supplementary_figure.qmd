---
title: "Principal Component Analysis - Proteome"
author: "Sergio Mosquim Junior"
format:
  html:
    toc: true
    code-fold: true
    embed-resources: true
    toc-location: left
    smooth-scroll: true
engine: knitr
---

# Required Packages
```{r}
library(tidyverse)
library(tidymodels)
library(patchwork)
```

# Output directory
```{r}
outputdir <- '/home/multiomics/results/figures/pca/'

if(!dir.exists(paths = outputdir)) {
  dir.create(path = outputdir,recursive = TRUE)
}
```

# Data
```{r}
designProt <- read_tsv(file = '/home/multiomics/results/design_files/mergedDesign_final_filtered.tsv') |> 
    mutate(
        type = sample_id |> 
            map(
                ~case_when(
                    str_detect(.x,'^Pool_B1') ~ 'P_B1', 
                    str_detect(.x, '^Pool_B2') ~ 'P_B2', 
                    str_detect(.x,'^S0') ~ 'S')) |> 
            unlist()
    )

designPhospho <- read_tsv(file = '/home/multiomics/results/design_files/mergedDesign_PHOSPHO_Filtered.tsv') |> 
        mutate(
        type = sample_id |> 
            map(
                ~case_when(
                    str_detect(.x,'^POOL_B1') ~ 'P_B1', 
                    str_detect(.x, '^POOL_B2') ~ 'P_B2', 
                    str_detect(.x,'^S0') ~ 'S')) |> 
            unlist()
    )

dataProt <- read_tsv(file = '/home/multiomics/results/rollup/fullproteome/cycloess_Rollup_Genes.tsv') |> 
    mutate(Unique.Ids = str_c("X_", Protein.Names) |> make.names(unique = TRUE), .after = 4)


dataPhospho <- read_tsv(file = '/home/multiomics/results/rollup/phosphoproteome/cycloess_normalized_sorted.tsv') |>
    mutate(Unique.Ids = str_c('X_', Protein.Names) |> 
        make.names(unique = TRUE)) 
```

# Principal Component Analysis
## Proteome
```{r}
samplesProt <- designProt |> 
    filter(sample_id %in% colnames(dataProt)) |> 
    pull(sample_id)

dataProtPrep <- dataProt |> 
    dplyr::select(Unique.Ids,all_of(samplesProt)) |> 
    drop_na() |> 
    pivot_longer(all_of(samplesProt), names_to = 'sample', values_to = 'expression') |> 
    pivot_wider(names_from = Unique.Ids, values_from = expression) |> 
    recipe() |> 
    update_role(starts_with('X_'), new_role = 'predictor') |> 
    step_normalize(all_predictors()) |> 
    recipes::prep() |> 
    bake(NULL)

pcaProt <- dataProtPrep |> 
    select(-sample) |> 
    prcomp(center = FALSE, scale. = FALSE)

pcaProtRes <- pcaProt |> 
    augment(dataProtPrep |> select(-starts_with('X_'))) |> 
    left_join(designProt, by = c('sample' = 'sample_id'))

plotPcaProt <- pcaProtRes |>
    ggplot(aes(x = .fittedPC1, y = .fittedPC2, color = type, text = sample))+
    geom_point()+
    scale_color_manual(
        values = c('S' = 'blue', 'P_B1' = 'darkred', 'P_B2' = 'red'),
        labels = c('S' = 'Sample', 'P_B1' = 'Pooled Samples - Plate 1', 'P_B2' = 'Pooled Samples - Plate 2'))+
    labs(
        x = 'Principal Component 1',
        y = 'Principal Component 2',
        color = 'Sample Type'
    )+
    theme_minimal()

```

## Phosphoproteome

```{r}
samplesPhospho <- designPhospho |> 
    filter(sample_id %in% colnames(dataPhospho)) |> 
    pull(sample_id)

dataPhosphoPrep <- dataPhospho |> 
    dplyr::select(Unique.Ids,all_of(samplesPhospho)) |> 
    drop_na() |> 
    pivot_longer(all_of(samplesPhospho), names_to = 'sample', values_to = 'expression') |> 
    pivot_wider(names_from = Unique.Ids, values_from = expression) |> 
    recipe() |> 
    update_role(starts_with('X_'), new_role = 'predictor') |> 
    step_normalize(all_predictors()) |> 
    recipes::prep() |> 
    bake(NULL)

pcaPhospho <- dataPhosphoPrep |> 
    select(-sample) |> 
    prcomp(center = FALSE, scale. = FALSE)

pcaPhosphoRes <- pcaPhospho |> 
    augment(dataPhosphoPrep |> select(-starts_with('X_'))) |> 
    left_join(designPhospho, by = c('sample' = 'sample_id'))

plotPcaPhospho <- pcaPhosphoRes |>
    ggplot(aes(x = .fittedPC1, y = .fittedPC2, color = type, text = sample))+
    geom_point()+
    scale_color_manual(
        values = c('S' = 'blue', 'P_B1' = 'darkred', 'P_B2' = 'red'),
        labels = c('S' = 'Sample', 'P_B1' = 'Pooled Samples - Plate 1', 'P_B2' = 'Pooled Samples - Plate 2'))+
    labs(
        x = 'Principal Component 1',
        y = 'Principal Component 2',
        color = 'Sample Type'
    )+
    theme_minimal()
```

## Combined Plots

```{r}
plots <- list(plotPcaProt, plotPcaPhospho)
plotsCombined <- plots |> 
    wrap_plots(nrow = 1)+
    plot_layout(axes = 'collect', guides = 'collect')+
    plot_annotation(tag_levels = 'A')

ggsave(filename = 'pca_plots.pdf', device = 'pdf', plot = plotsCombined, path = outputdir, dpi = 1200, compress = TRUE, width = 10, height = 7)
```