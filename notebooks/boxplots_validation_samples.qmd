---
title: "Boxplot Validation Samples"
author: "Sergio Mosquim Junior"
format:
  html:
    toc: true
    code-fold: true
    embed-resources: true
    toc-location: left
    smooth-scroll: true
    message: false
engine: knitr
params:
  comparison: 'Group1vsGroup2'
  time: 'DRFi_days'
  event: 'DRFi_event'
  outcome: 'DRFi_event'
editor_options: 
  chunk_output_type: console
---

# Requires Packages:

```{r required packages}
#| message: false
#| warning: false
library(tidyverse)
library(gridExtra)
library(grDevices)
library(MOFA2)
library(ggpubr)
```

# Boxplots from DE features
## Load Data
```{r}
#| eval: !expr (params$comparison!="AllSamples_noG2")
#Output Directory
outputdir <- paste0('/home/multiomics/results/figures/survival_analysis/DE/',params$comparison,'/',params$comparison,'_',params$event,'/')

files <- list.files(path = '/home/multiomics/results/',pattern = 'stats.tsv',recursive = TRUE,include.dirs = TRUE,full.names = TRUE) %>% 
  .[str_detect(.,params$comparison)] %>% 
  .[!str_detect(.,'cluster')]

design <- read_tsv(file = '/home/multiomics/results/design_files/design_multiomics_mofa.tsv')

if(str_detect(params$comparison,'noG2')){
  design <- design %>% 
    filter(str_detect(Group.Info,'Group2',negate=TRUE))
}

if(str_equal(params$comparison,'Group1vsGroup2')){
  design <- design %>% 
    filter(Group.Info %in% c('Group1','Group2'))
}

data <- list(proteomics=read_tsv(file = files[str_detect(files,'full')]),
             phosphoproteomics=read_tsv(file = files[str_detect(files,'aggModSeq')]),
             transcriptomics=read_tsv(file = files[str_detect(files,'transcript')]))

idCol <- list(proteomics='Protein.Names',phosphoproteomics='Protein.Names',transcriptomics='Gene.Name')
omics_type <- list('_proteomics','_phosphoproteomics','_transcriptomics')
```

## Select Features
```{r}
#| eval: !expr (params$comparison!="AllSamples_noG2")

colTypes <- cols("Residue"=col_character(),.default = col_guess())

coxFeats <- list.files(path = '/home/multiomics/results/figures/survival_analysis/DE/',pattern = 'cox_analysis_res',full.names = TRUE,recursive = TRUE) %>% 
  .[str_detect(.,params$comparison)] %>% 
  .[str_detect(.,params$event)] %>% 
  map(function(x){read_tsv(file = x,col_types = colTypes)}) %>% 
  list_rbind() %>% 
  dplyr::filter(.[["p.value_univariable"]]<0.05 | .[["p.value_multivariable"]]<0.05) %>% 
  dplyr::select(variable) %>% 
  unlist() %>% 
  unique()

idMap <- list.files(path = "/home/multiomics/results/figures/survival_analysis/DE/",pattern = "featIDs\\.tsv",full.names = TRUE,recursive = TRUE) %>%
  .[str_detect(.,params$comparison)] %>%
  map(function(x){read_tsv(file = x,col_types = colTypes)}) %>%
  list_rbind() %>%
  filter(!duplicated(.))

protData <- if(sum(str_detect(string = coxFeats,pattern = "\\_proteomics"))>=1){
  feature <- coxFeats %>% .[str_detect(.,"\\_proteomics")]
  mapping <- idMap %>% 
    filter(Protein.Names %in% feature) %>% 
    .[["Protein.Names"]] %>%
    str_split_i(pattern = "\\_proteomics",i = 1) %>% 
    str_replace_all(pattern = "\\.",replacement = "\\;")
  final <- data[["proteomics"]] %>% 
    filter(Protein.Names %in% mapping) %>% 
    select(design[["sample_id"]]) %>% 
    t() %>% 
    as.data.frame() %>%
    mutate(sample=rownames(.))
} %>% relocate(where(is.character),.before=where(is.numeric))
if(exists("protData")){colnames(protData) <- c("sample",feature)}

phosphoData <- if(sum(str_detect(string = coxFeats,pattern = "\\_phosphoproteomics"))>=1){
  feature <- coxFeats %>% .[str_detect(.,"\\_phosphoproteomics")]
  mapping <- idMap %>%           
    filter(Protein.Names %in% feature) %>% 
    .[["Modified.Sequence"]]
  final <- data[["phosphoproteomics"]] %>%
    filter(Modified.Sequence %in% mapping) %>% 
    select(design[["sample_id"]]) %>% 
    t() %>% 
    as.data.frame() %>%
    mutate(sample=rownames(.))
} %>% relocate(where(is.character),.before=where(is.numeric))
if(exists("phosphoData")){colnames(phosphoData) <- c("sample",feature)}

geneData <- if(sum(str_detect(string = coxFeats,pattern = "\\_transcriptomics"))>=1){
  feature <- coxFeats %>% .[str_detect(.,"\\_transcriptomics")]
  mapping <- idMap %>% 
    filter(Gene.Name %in% feature) %>% 
    .[["Gene.ID"]] %>%
    str_split_i(pattern = "\\_transcriptomics",i = 1) 
  final <- data[["transcriptomics"]] %>% 
    filter(Gene.ID %in% mapping) %>% 
    select(design[["sample_id"]]) %>% 
    t() %>% 
    as.data.frame() %>%
    mutate(sample=rownames(.))
} %>% relocate(where(is.character),.before=where(is.numeric))
if(!is.null(geneData)){colnames(geneData) <- c("sample",feature)}

dataDE <- list(proteomics=protData,phosphoproteomics=phosphoData,transcriptomics=geneData) %>% 
  compact() %>% 
  reduce(.f = full_join) %>% 
  left_join(y = design[c("sample_id","LN","DRFi_event")],by = c("sample"="sample_id"))
```

## Generate Plots
```{r}
#| eval: !expr (params$comparison!="AllSamples_noG2")

features <- coxFeats[coxFeats %in% colnames(dataDE)]
DEplots <- map(features,function(x){
    ggplot(dataDE)+
      geom_point(mapping = aes(x=as.factor(.data[[params$outcome]]),y=.data[[x]],color=as.factor(.data[[params$outcome]])))+
      geom_boxplot(mapping = aes(x=as.factor(.data[[params$outcome]]),y=.data[[x]],fill=as.factor(.data[[params$outcome]])),alpha=0.7)+
      scale_color_manual(name=params$outcome,values = c("0"="darkblue","1"="darkred"))+
      scale_fill_manual(name=params$outcome,values = c("0"="darkblue","1"="darkred"))+
      stat_compare_means(mapping = aes(x=as.factor(.data[[params$outcome]]),y=.data[[x]]),
                         method = 't.test',
                         symnum.args = list(cutpoints = c(0, 0.0001, 0.001, 0.01, 0.05, Inf), 
                                            symbols = c("****", "***", "**", "*", "ns")),
                         ref.group = "0",
                         show.legend = FALSE)+
      xlab(params$outcome)+
      theme_bw()
  })

cairo_pdf(filename = paste0(outputdir,'boxplots_DE.pdf'),onefile = TRUE,width = 9,height = 9)
plots <- map(seq_along(DEplots),function(x){DEplots[[x]] %>% ggplotGrob()})
gridExtra::marrangeGrob(grobs = plots,ncol = 1,nrow = 1,top = '')
dev.off()
```


# Boxplots from MOFA features
## Select Features
```{r}
#Output Directory
outputdir <- paste0("/home/multiomics/results/figures/survival_analysis/MOFA/",params$comparison,"/",params$comparison,"_",params$outcome,"_",params$event,"/")
colTypes <- cols("Residue"=col_character(),.default = col_guess())

coxFeats <- list.files(path = '/home/multiomics/results/figures/survival_analysis/MOFA/',pattern = 'cox_analysis_res',full.names = TRUE,recursive = TRUE) %>% 
  .[str_detect(.,params$comparison)] %>% 
  .[str_detect(.,params$event)] %>% 
  map(function(x){read_tsv(file = x,col_types = colTypes)}) %>% 
  list_rbind() %>% 
  dplyr::filter(.[["p.value_univariable"]]<0.05 | .[["p.value_multivariable"]]<0.05) %>% 
  dplyr::select(variable) %>% 
  unlist() %>% 
  unique()

model <- list.files(path = "/home/multiomics/results/MOFA/",pattern = "model.RDS",full.names = TRUE,recursive = TRUE) %>% 
  .[str_detect(.,params$comparison)] %>% 
  read_rds()

features <- coxFeats %>% str_split_i(pattern = '\\.proteomics|\\.transcriptomics|\\.phosphoproteomics',1)
featList <- list(proteomics=c(features[str_detect(coxFeats,'\\.proteomics')]),
                 phosphoproteomics=c(features[str_detect(coxFeats,'\\.phosphoproteomics')]),
                 transcriptomics=c(features[str_detect(coxFeats,'\\.transcriptomics')]),
                 immuneinfiltration=c(features[str_detect(coxFeats,'\\.immuneinfiltration')]))

dataMOFA <- list(
  proteomics=if(!is_empty(featList[["proteomics"]])){
    get_data(object = model,features = list(proteomics=featList$proteomics),as.data.frame = TRUE) %>% 
      mutate(feature=paste0(feature,'.',view)) %>% 
      pivot_wider(id_cols = 'sample',names_from = feature,values_from = value)}else{NULL},
  phosphoproteomics=if(!is_empty(featList[["phosphoproteomics"]])){
    get_data(object = model,features = list(phosphoproteomics=featList$phosphoproteomics),as.data.frame = TRUE) %>%
      mutate(feature=paste0(feature,'.',view)) %>%
      pivot_wider(id_cols = 'sample',names_from = feature,values_from = value)}else{NULL},
  transcriptomics=if(!is_empty(featList[["transcriptomics"]])){
    get_data(object = model,features = list(transcriptomics=featList$transcriptomics),as.data.frame = TRUE) %>%
      mutate(feature=paste0(feature,'.',view)) %>%
      pivot_wider(id_cols = 'sample',names_from = feature,values_from = value)}else{NULL}
  ) %>% 
  compact() %>% 
  reduce(.f = ~left_join(x = .x,y = .y,by = 'sample')) %>% 
  left_join(y = model@samples_metadata[,c("sample","LN","DRFi_event")])
```

## Generate Plots
```{r}
features <- coxFeats[coxFeats %in% colnames(dataMOFA)]
mofaPlot <- map(features,function(x){
    ggplot(dataMOFA)+
      geom_point(mapping = aes(x=as.factor(.data[[params$outcome]]),y=.data[[x]],color=as.factor(.data[[params$outcome]])))+
      geom_boxplot(mapping = aes(x=as.factor(.data[[params$outcome]]),y=.data[[x]],fill=as.factor(.data[[params$outcome]])),alpha=0.7)+
      scale_color_manual(name=params$outcome,values = c("0"="darkblue","1"="darkred"))+
      scale_fill_manual(name=params$outcome,values = c("0"="darkblue","1"="darkred"))+
      stat_compare_means(mapping = aes(x=as.factor(.data[[params$outcome]]),y=.data[[x]]),
                         method = 't.test',
                         symnum.args = list(cutpoints = c(0, 0.0001, 0.001, 0.01, 0.05, Inf), 
                                            symbols = c("****", "***", "**", "*", "ns")),
                         ref.group = "0",
                         show.legend = FALSE)+
      xlab(params$outcome)+
      theme_bw()
  })

cairo_pdf(filename = paste0(outputdir,'boxplots_mofa.pdf'),onefile = TRUE,width = 9,height = 9)
plots <- map(seq_along(mofaPlot),function(x){mofaPlot[[x]] %>% ggplotGrob()})
gridExtra::marrangeGrob(grobs = plots,ncol = 1,nrow = 1,top = '')
dev.off()
```

